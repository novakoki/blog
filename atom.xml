<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Consolas</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://ziqi.moe/blog/"/>
  <updated>2016-12-11T13:01:58.415Z</updated>
  <id>http://ziqi.moe/blog/</id>
  
  <author>
    <name>Ziqi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Note Of Programming Languages(1)</title>
    <link href="http://ziqi.moe/blog/A-Note-Of-Programing-Languages-ML/"/>
    <id>http://ziqi.moe/blog/A-Note-Of-Programing-Languages-ML/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2016-12-11T13:01:58.415Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Brief-Intro&quot;&gt;&lt;a href=&quot;#Brief-Intro&quot; class=&quot;headerlink&quot; title=&quot;Brief Intro&quot;&gt;&lt;/a&gt;Brief Intro&lt;/h1&gt;&lt;h2 id=&quot;Four-kinds-of-languages&quot;&gt;&lt;a href=&quot;#Four-kinds-of-languages&quot; class=&quot;headerlink&quot; title=&quot;Four kinds of languages&quot;&gt;&lt;/a&gt;Four kinds of languages&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数式 (Functional)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;面向对象 (Object-Oriented)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;静态 (Static)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ML&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;动态 (Dynamic)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Racket&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Essential-pieces-of-programming-language&quot;&gt;&lt;a href=&quot;#Essential-pieces-of-programming-language&quot; class=&quot;headerlink&quot; title=&quot;Essential pieces of programming language&quot;&gt;&lt;/a&gt;Essential pieces of programming language&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法 (Syntax)&lt;/li&gt;
&lt;li&gt;语义 (Semantic)&lt;/li&gt;
&lt;li&gt;Idioms: Common approaches to using language features ot express computation&lt;/li&gt;
&lt;li&gt;Libraries: 现成可以用的库，以及如操作文件这种没法自己实现的功能&lt;/li&gt;
&lt;li&gt;Tools: Compiler, REPL, Debugger, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ML-Part&quot;&gt;&lt;a href=&quot;#ML-Part&quot; class=&quot;headerlink&quot; title=&quot;ML Part&quot;&gt;&lt;/a&gt;ML Part&lt;/h1&gt;&lt;h1 id=&quot;Static&quot;&gt;&lt;a href=&quot;#Static&quot; class=&quot;headerlink&quot; title=&quot;Static&quot;&gt;&lt;/a&gt;Static&lt;/h1&gt;&lt;p&gt;ML 是一门静态语言，静态是指它在运行前进行类型检查&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = e &lt;span class=&quot;comment&quot;&gt;(* 称之为一次数据绑定， e 为一个表达式 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而我们要看到的不仅仅是这样一句语法描述，还要了解背后的语义，即类型检查和求值。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* x 的类型为 int，值为 1 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 每做一次数据绑定，当前环境都会更新，这个环境即作用域，后面会详细讨论 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; y = x + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* y 的类型为 int, 值为 3 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = y + &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 类型检查失败， + 不能用于 string 与 int 之间 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = w &lt;span class=&quot;comment&quot;&gt;(* 类型检查失败，当前环境中找不到 w *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于静态与动态，之后将与 Racket 对比来看，这里只提一些 ML 的特性。&lt;/p&gt;
&lt;h2 id=&quot;Type-Inference&quot;&gt;&lt;a href=&quot;#Type-Inference&quot; class=&quot;headerlink&quot; title=&quot;Type Inference&quot;&gt;&lt;/a&gt;Type Inference&lt;/h2&gt;&lt;p&gt;ML 是一门静态语言，但却是一门大多数时候不显式指定类型的语言，这得益于它强大的类型推导能力。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* x 的类型为 int，是因为 + 运算符的返回类型为 int *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; return_self xs = xs &lt;span class=&quot;comment&quot;&gt;(* 不能精确地确定这个函数的类型，所以类型为 &#39;a -&amp;gt; &#39;a，&#39;a 为任意类型 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 再如 length 函数返回一个列表的长度，它的类型就为 &#39;a list -&amp;gt; int *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个类型推导的过程例子如下&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; f (x, y, z) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; (x, y, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (y, x, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. 令 x 的类型为 T1， y 为 T2， z 为 T3，返回类型为 T4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. if 语句的两个分支得到的类型必须一致，即 T4=T1*T2*T3=T2*T1*T3，得到约束 T1=T2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 最终函数类型为 &#39;a*&#39;a*&#39;b -&amp;gt; &#39;a*&#39;a*&#39;b，即 x 和 y 的类型必须一致，而 z 可以是任意类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Option&quot;&gt;&lt;a href=&quot;#Option&quot; class=&quot;headerlink&quot; title=&quot;Option&quot;&gt;&lt;/a&gt;Option&lt;/h2&gt;&lt;p&gt;Option 提供了一种处理边界情况的能力,&lt;br&gt;即运算得到的可能是某种你需要的结果 (SOME)，也可能没有结果 (NONE)。&lt;/p&gt;
&lt;p&gt;比如写一个找出一个 int list 中最大值的函数&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* Without Option *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; find_greatest (xs: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; null xs &lt;span class=&quot;comment&quot;&gt;(* 考虑空列表这种边界情况 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 这里如果返回 0 就是一种很不好的风格 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; greatest_number&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在一门静态语言中，函数返回值的类型是确定的，在没有 Option 的情况下只能返回一个特定的数&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* With Option *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; find_greatest (xs: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; null xs &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NONE&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 没有结果，即找不到最大值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SOME&lt;/span&gt; (greatest_number) &lt;span class=&quot;comment&quot;&gt;(* 有最大值，则包装成 Option 返回 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Immutable&quot;&gt;&lt;a href=&quot;#Immutable&quot; class=&quot;headerlink&quot; title=&quot;Immutable&quot;&gt;&lt;/a&gt;Immutable&lt;/h1&gt;&lt;p&gt;函数式语言最重要的特性之一就是数据默认是不可变的&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 一旦绑定了就无法再改变这个 x 的值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* ML 中没有赋值的概念，这个表达式比较是否相等 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 新的数据绑定，之前的 x 还在但是会被新的 x 遮蔽(shadow) *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个比较明显的好处是排除了引用（别名）的危害。&lt;br&gt;如果数据不会被修改，那一个“变量”是否是引用就并不重要。&lt;br&gt;甚至于数据结构的存储是可以共享的，以此节省空间的开销。&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; y = [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = x::y &lt;span class=&quot;comment&quot;&gt;(* z 为 x 和 y 两个列表拼接而成 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 如果 x 和 y 是引用， 那么更改 x 或 y 都会使得 z 的值发生变化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;但是如果数据是不可变的就没有这个问题，甚至在内存分配上 z 其实只要共享 x 和 y 的空间就可以了 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利于并行和并发。这个好处使得函数式语言（或者理念）焕发新生。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在数据不可变的基础上建立数据结构，所关注的不再是常见的增删改查，而是构造和解构，即如何如何构造新的数据结构和从数据结构中取得数据。&lt;/p&gt;
&lt;h2 id=&quot;Build-New-Types&quot;&gt;&lt;a href=&quot;#Build-New-Types&quot; class=&quot;headerlink&quot; title=&quot;Build New Types&quot;&gt;&lt;/a&gt;Build New Types&lt;/h2&gt;&lt;p&gt;一门语言中一般会提供一些基本类型，如 int, bool, float, etc.&lt;/p&gt;
&lt;p&gt;同时也会提供构造自定义类型的能力&lt;/p&gt;
&lt;p&gt;自定义类型可以分为下面三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each Of : 即数据类型同时包含多个类型的值，比如元组 (1, “string”) 类型是 (int * string)&lt;/p&gt;
&lt;p&gt;ML 中使用 &lt;em&gt;Records&lt;/em&gt; 来表示这样的类型&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; my_records = &amp;#123;bar: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, foo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, baz: (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;(* 元组是一种特殊的 Records *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One Of : 数据类型包含多个类型中的一个，比如 int option，可能包含一个 int 值，也可能没有&lt;/p&gt;
&lt;p&gt;ML 中使用 &lt;em&gt;Datatype&lt;/em&gt; 来表示这样的类型&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;datatype&lt;/span&gt; mytype = &lt;span class=&quot;type&quot;&gt;TwoInts&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | &lt;span class=&quot;type&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* | 是或的意思 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | &lt;span class=&quot;type&quot;&gt;Pizza&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* TwoInts, Str, Pizza 相当于给某种类型加上了标签，同时它们也是函数可以用来构造与解构 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; mydata = &lt;span class=&quot;type&quot;&gt;TwoInts&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;(* mydata 的类型为 mytype *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;datatype&lt;/span&gt; my_int_option = &lt;span class=&quot;type&quot;&gt;SOME&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* Option 是一种特殊的 Datatype *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      | &lt;span class=&quot;type&quot;&gt;NONE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Self Reference : 自指的类型，用于描述递归的数据类型，&lt;br&gt;比如 int list 可能是空的，也可能是一个 int 值和另一个 int list 的组合（递归地定义）&lt;br&gt;（事实上 int list 融合了以上三种）&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;datatype&lt;/span&gt; my_int_list = &lt;span class=&quot;type&quot;&gt;Empty&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    | &lt;span class=&quot;type&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * my_int_list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;[]&lt;/span&gt;]]]]] &lt;span class=&quot;comment&quot;&gt;(* 类似俄罗斯套娃 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Pattern-Match&quot;&gt;&lt;a href=&quot;#Pattern-Match&quot; class=&quot;headerlink&quot; title=&quot;Pattern Match&quot;&gt;&lt;/a&gt;Pattern Match&lt;/h2&gt;&lt;p&gt;模式匹配提供了强大优雅的从各种自定义数据类型中取数据的能力，即解构的能力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;case 表达式&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; getOrElse &lt;span class=&quot;keyword&quot;&gt;op&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;type&quot;&gt;NONE&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | &lt;span class=&quot;type&quot;&gt;SOME&lt;/span&gt; x =&amp;gt; x &lt;span class=&quot;comment&quot;&gt;(* 从 Option 中解构出包装的值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; find_greatest xs =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; xs &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head::tail =&amp;gt; &lt;span class=&quot;comment&quot;&gt;(* 从列表解构出表头 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head::(body::tail) =&amp;gt; &lt;span class=&quot;comment&quot;&gt;(* Nested Pattern，匹配至少有一个元素的列表 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 从上一节的 Datatype 中解构 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; mydata &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TwoInts&lt;/span&gt;(a, b) =&amp;gt; a + b &lt;span class=&quot;comment&quot;&gt;(* 解构出 a = 1, b = 2 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  | _ =&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* TwoInts 既是构造器也是提取器 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数参数解构&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; is_greater (x, y) = &lt;span class=&quot;comment&quot;&gt;(* 这里已经发生了模式匹配， ML 所有的函数都是单参数的， 这里实际的参数是 (x, y) 这个元组 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x &amp;gt; y &lt;span class=&quot;comment&quot;&gt;(* 在函数体内取得的是已经从元组中解构出的值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* ML 中另一种实现多参函数的方法是柯里化 (Currying) *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;let, val 解构&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; sum_triple (triple: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; (x,y,z) = triple &lt;span class=&quot;comment&quot;&gt;(* 解构出元组中的值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; x + y + z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Functions-As-Value&quot;&gt;&lt;a href=&quot;#Functions-As-Value&quot; class=&quot;headerlink&quot; title=&quot;Functions As Value&quot;&gt;&lt;/a&gt;Functions As Value&lt;/h1&gt;&lt;p&gt;函数式语言另一个最重要的特性就是函数可以作为值来传递，即函数是一级公民。（First-Class Function)&lt;/p&gt;
&lt;h2 id=&quot;Take-Function-As-Argument&quot;&gt;&lt;a href=&quot;#Take-Function-As-Argument&quot; class=&quot;headerlink&quot; title=&quot;Take Function As Argument&quot;&gt;&lt;/a&gt;Take Function As Argument&lt;/h2&gt;&lt;p&gt;以函数为参数的函数称为高阶函数，利用高阶函数可以更好地抽象与重用代码。（这是一种 idiom）&lt;/p&gt;
&lt;p&gt;典型的高阶函数就是 map 。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fun map (f, xs) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  case xs of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [] =&amp;gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | x::xs&amp;apos; =&amp;gt; (f x)::map(f, xs&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map(fn x =&amp;gt; x * 2, [1,2,3]) (* 得到 [2,4,6] *)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Lexical-Scope-And-Closure&quot;&gt;&lt;a href=&quot;#Lexical-Scope-And-Closure&quot; class=&quot;headerlink&quot; title=&quot;Lexical Scope And Closure&quot;&gt;&lt;/a&gt;Lexical Scope And Closure&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;function&lt;/em&gt; (closure) = &lt;em&gt;code&lt;/em&gt; (for function body) + &lt;em&gt;environment&lt;/em&gt; (lexical scope)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即函数能访问到的变量不仅仅有参数和函数体内定义的变量，还有它的词法作用域中的变量。&lt;/p&gt;
&lt;p&gt;例子：回调、柯里化、函数组合等等&lt;/p&gt;
&lt;p&gt;（闭包这部分资料太多太多，不作具体展开了）&lt;/p&gt;
&lt;h1 id=&quot;Tail-Recursion&quot;&gt;&lt;a href=&quot;#Tail-Recursion&quot; class=&quot;headerlink&quot; title=&quot;Tail Recursion&quot;&gt;&lt;/a&gt;Tail Recursion&lt;/h1&gt;&lt;p&gt;大多数函数式语言中都没有过程式语言中常用的循环语句，而是通过递归的方式来实现。（这也是一种 idiom)&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; sum1 xs =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; xs &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;literal&quot;&gt;[]&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  | head::tail =&amp;gt; head + sum1 tail &lt;span class=&quot;comment&quot;&gt;(* bad style cause stack overflow *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 需要维护一个 O(n) 的调用栈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sum1 [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + sum1 [2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 2 + sum1 [3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 2 + 3 + sum1 []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 2 + 3 + 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 2 + 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; sum2 xs =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; helper (xs, acc) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; xs &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;literal&quot;&gt;[]&lt;/span&gt; =&amp;gt; acc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | head::tail =&amp;gt; helper(tail, acc + head) &lt;span class=&quot;comment&quot;&gt;(* tail recursion*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; helper(xs, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 尾递归优化下，不需要维护整个调用栈，空间复杂度 O(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  helper([1,2,3], 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  helper([2,3], 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  helper([3], 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  helper([], 6)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;Module&lt;/h1&gt;&lt;p&gt;ML 使用模块来管理命名空间，分离接口与实现，以及隐藏私有方法。&lt;/p&gt;
&lt;p&gt;to be continued&lt;br&gt;update at 2016.12.11&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Brief-Intro&quot;&gt;&lt;a href=&quot;#Brief-Intro&quot; class=&quot;headerlink&quot; title=&quot;Brief Intro&quot;&gt;&lt;/a&gt;Brief Intro&lt;/h1&gt;&lt;h2 id=&quot;Four-kinds-of-languages&quot;&gt;&lt;a href=&quot;#Four-kinds-of-languages&quot; class=&quot;headerlink&quot; title=&quot;Four kinds of languages&quot;&gt;&lt;/a&gt;Four kinds of languages&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数式 (Functional)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;面向对象 (Object-Oriented)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;静态 (Static)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ML&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;动态 (Dynamic)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Racket&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Essential-pieces-of-programming-language&quot;&gt;&lt;a href=&quot;#Essential-pieces-of-programming-language&quot; class=&quot;headerlink&quot; title=&quot;Essential pieces of programming language&quot;&gt;&lt;/a&gt;Essential pieces of programming language&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法 (Syntax)&lt;/li&gt;
&lt;li&gt;语义 (Semantic)&lt;/li&gt;
&lt;li&gt;Idioms: Common approaches to using language features ot express computation&lt;/li&gt;
&lt;li&gt;Libraries: 现成可以用的库，以及如操作文件这种没法自己实现的功能&lt;/li&gt;
&lt;li&gt;Tools: Compiler, REPL, Debugger, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ML-Part&quot;&gt;&lt;a href=&quot;#ML-Part&quot; class=&quot;headerlink&quot; title=&quot;ML Part&quot;&gt;&lt;/a&gt;ML Part&lt;/h1&gt;&lt;h1 id=&quot;Static&quot;&gt;&lt;a href=&quot;#Static&quot; class=&quot;headerlink&quot; title=&quot;Static&quot;&gt;&lt;/a&gt;Static&lt;/h1&gt;&lt;p&gt;ML 是一门静态语言，静态是指它在运行前进行类型检查&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = e &lt;span class=&quot;comment&quot;&gt;(* 称之为一次数据绑定， e 为一个表达式 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而我们要看到的不仅仅是这样一句语法描述，还要了解背后的语义，即类型检查和求值。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* x 的类型为 int，值为 1 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 每做一次数据绑定，当前环境都会更新，这个环境即作用域，后面会详细讨论 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; y = x + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* y 的类型为 int, 值为 3 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = y + &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 类型检查失败， + 不能用于 string 与 int 之间 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = w &lt;span class=&quot;comment&quot;&gt;(* 类型检查失败，当前环境中找不到 w *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于静态与动态，之后将与 Racket 对比来看，这里只提一些 ML 的特性。&lt;/p&gt;
&lt;h2 id=&quot;Type-Inference&quot;&gt;&lt;a href=&quot;#Type-Inference&quot; class=&quot;headerlink&quot; title=&quot;Type Inference&quot;&gt;&lt;/a&gt;Type Inference&lt;/h2&gt;&lt;p&gt;ML 是一门静态语言，但却是一门大多数时候不显式指定类型的语言，这得益于它强大的类型推导能力。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* x 的类型为 int，是因为 + 运算符的返回类型为 int *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; return_self xs = xs &lt;span class=&quot;comment&quot;&gt;(* 不能精确地确定这个函数的类型，所以类型为 &#39;a -&amp;gt; &#39;a，&#39;a 为任意类型 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 再如 length 函数返回一个列表的长度，它的类型就为 &#39;a list -&amp;gt; int *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个类型推导的过程例子如下&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; f (x, y, z) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; (x, y, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (y, x, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. 令 x 的类型为 T1， y 为 T2， z 为 T3，返回类型为 T4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. if 语句的两个分支得到的类型必须一致，即 T4=T1*T2*T3=T2*T1*T3，得到约束 T1=T2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 最终函数类型为 &#39;a*&#39;a*&#39;b -&amp;gt; &#39;a*&#39;a*&#39;b，即 x 和 y 的类型必须一致，而 z 可以是任意类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://ziqi.moe/blog/tags/pl/"/>
    
  </entry>
  
  <entry>
    <title>网易前端暑期实习生笔试面经（2016春）</title>
    <link href="http://ziqi.moe/blog/2016-Spring-Netease-Front-End-Interview/"/>
    <id>http://ziqi.moe/blog/2016-Spring-Netease-Front-End-Interview/</id>
    <published>2016-04-14T16:00:00.000Z</published>
    <updated>2016-04-15T05:41:27.313Z</updated>
    
    <content type="html">&lt;h2 id=&quot;笔试&quot;&gt;&lt;a href=&quot;#笔试&quot; class=&quot;headerlink&quot; title=&quot;笔试&quot;&gt;&lt;/a&gt;笔试&lt;/h2&gt;&lt;p&gt;选择题忽略&lt;/p&gt;
&lt;p&gt;问答题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用原生JS实现一个接口，能够用Ajax上传文件并显示上传进度，上传完成后接收一个来自服务器的json数据&lt;/li&gt;
&lt;li&gt;实现一个三列布局&lt;/li&gt;
&lt;li&gt;如何防范CSRF（跨站请求伪造）&lt;/li&gt;
&lt;li&gt;请列举减少HTTP请求数和资源文件大小的方法&lt;/li&gt;
&lt;li&gt;列举实现跨域请求的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;p&gt;一上来先是自我介绍，在这个过程中，面试官会看你的简历&lt;/p&gt;
&lt;p&gt;Q：CSS和JS熟悉哪个？&lt;br&gt;A：JS&lt;/p&gt;
&lt;p&gt;Q：浏览器端的JS包含哪几个部分？&lt;br&gt;A：ECMAScript+DOM&lt;/p&gt;
&lt;p&gt;Q：DOM包含哪些对象？&lt;br&gt;A：Node对象，然后继承下来的有Document,Element,Text，还有想不起来了&lt;/p&gt;
&lt;p&gt;Q：JS有哪些基本类型？&lt;br&gt;A：Number,String,undefined,null,还有引用类型的 //这里我少答了Boolean，然后我以为问的是数据类型&lt;/p&gt;
&lt;p&gt;Q：基本类型和引用类型有什么区别？&lt;/p&gt;
&lt;p&gt;A：赋值的时候基本类型按值，引用类型按引用，就是基本类型会复制一份，引用类型就是一个新的指针。&lt;br&gt;函数传参的时候都是按值传递&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Q：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;a : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj = &amp;#123;a : &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(obj); &lt;span class=&quot;comment&quot;&gt;//问obj怎么变？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A：外面的obj不变，因为里面等于让局部的obj指向了一个新的对象&lt;/p&gt;
&lt;p&gt;//下面两题是因为我简历有写我会C++&lt;/p&gt;
&lt;p&gt;Q：C++的引用类型是怎么样的？&lt;br&gt;A：C++里面的引用相当于一个变量的别名，对引用做操作也会影响该变量&lt;/p&gt;
&lt;p&gt;Q：JS和C++有什么区别？&lt;br&gt;A：面向对象不一样，C++是类式继承，JS是原型链式。C++在函数式方面没有JS来的强。&lt;br&gt;JS没有C++的一些高级特性，比如模板、泛型。&lt;/p&gt;
&lt;p&gt;Q：实现一个左边定宽右边自适应的两列布局，要求使用浮动和flex两种方法&lt;/p&gt;
&lt;p&gt;A：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width: 320px; //这个是面试官给的，面试官画了图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面这段我少写了，然后面试官就问你上面这样能够让右边自适应吗？囧&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  margin-left: 320px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//flex憋了很久没写出来。。。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Q：position有哪些属性？各自有什么特点？&lt;/p&gt;
&lt;p&gt;A：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static：正常文档流&lt;/li&gt;
&lt;li&gt;relative：相对于正常文档流中的位置定位&lt;/li&gt;
&lt;li&gt;absolute：相对于第一个不是static的父元素定位&lt;/li&gt;
&lt;li&gt;fixed：相对于浏览器定位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q：画一下标准盒模型&lt;br&gt;A：//感觉这里已经质疑我CSS是不是一点不会了，囧&lt;/p&gt;
&lt;p&gt;Q：闭包是什么？有什么用？&lt;br&gt;A：//这里我讲得很不清楚，大致说了就是函数里面套函数，可以保存变量&lt;/p&gt;
&lt;p&gt;Q：ES5中，除了函数，什么能够产生作用域？&lt;br&gt;A：对象？&lt;br&gt;//然后被回问对象有作用域吗？然后我说对象里面this会变。。。完全把作用域和执行环境弄混了&lt;/p&gt;
&lt;p&gt;Q：函数有哪几种调用方式？&lt;/p&gt;
&lt;p&gt;A：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接调用&lt;/li&gt;
&lt;li&gt;作为对象的方法调用&lt;/li&gt;
&lt;li&gt;apply,call&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  func : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.func();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;问a怎么变，匿名函数里的this是什么？怎么改变里面的this？匿名函数不能传参怎么改变obj.a的值？&lt;/p&gt;
&lt;p&gt;A: obj.a不变，匿名函数里的this指向全局对象(window)，相当于给window加了一个名为a的属性。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//或者apply&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Q：描述一下事件模型？IE的事件模型是怎样的？事件代理是什么？事件代理中怎么定位实际事件产生的目标？&lt;/p&gt;
&lt;p&gt;A：捕获-&amp;gt;处于目标-&amp;gt;冒泡，IE应该是只有冒泡没有捕获。&lt;br&gt;事件代理就是在父元素上绑定事件来处理，通过event对象的target来定位。&lt;/p&gt;
&lt;p&gt;Q：JS动画有哪些实现方法？&lt;br&gt;A：不太清楚&lt;/p&gt;
&lt;p&gt;Q：那你知道还有什么实现动画的方法？&lt;br&gt;A：CSS3的animation，还有用canvas做的算吗？&lt;/p&gt;
&lt;p&gt;Q：你最近有用过什么框架或库？&lt;br&gt;A：用React Native做安卓，还在学 //然后面试官说那你现在还是主要在原生JS的层面咯&lt;/p&gt;
&lt;p&gt;Q：你主要有哪些学习渠道？&lt;br&gt;A：MDN,Udacity,慕课网&lt;/p&gt;
&lt;p&gt;Q：node.js有用过吗？&lt;br&gt;A：有，主要用一些工具，比如gulp&lt;/p&gt;
&lt;p&gt;Q：你有用过什么代码管理工具？&lt;br&gt;A：//然后面试官看到简历上有GitHub就不问了&lt;/p&gt;
&lt;p&gt;Q：你还有什么问题吗？&lt;br&gt;A：//这里我问了这个部门主要是面向技术人员还是普通用户开发，回答是都有，还回问了我一句你想做哪方面&lt;/p&gt;
&lt;p&gt;最后面试官说你先去休息一下，待会儿还有个二面 //意思是一面居然过了。。。&lt;/p&gt;
&lt;h2 id=&quot;二面&quot;&gt;&lt;a href=&quot;#二面&quot; class=&quot;headerlink&quot; title=&quot;二面&quot;&gt;&lt;/a&gt;二面&lt;/h2&gt;&lt;p&gt;二面没让自我介绍，直接看到简历上有写项目经历就开问了&lt;/p&gt;
&lt;p&gt;Q：说说你做过的项目以及从项目中学到了什么&lt;br&gt;A：//balabala… 感觉很紧张，说得不是很清楚&lt;/p&gt;
&lt;p&gt;Q：函数声明和函数表达式有什么区别？&lt;br&gt;A：函数声明会将那个函数提升到最前面，成为全局函数。函数声明要指定函数名，而函数表达式不用，可以用作匿名函数。&lt;/p&gt;
&lt;p&gt;Q：作用域链是什么？&lt;br&gt;A：//说的不是很清楚&lt;/p&gt;
&lt;p&gt;Q：面向对象有哪几个特点？&lt;br&gt;A：继承、多态。。。想不起来了&lt;/p&gt;
&lt;p&gt;Q：JS怎么实现继承？&lt;br&gt;A：将父对象的一个实例赋值给子对象的原型&lt;/p&gt;
&lt;p&gt;Q：怎么判断属性来自对象自身还是原型链？&lt;br&gt;A：hasOwnProperty&lt;/p&gt;
&lt;p&gt;Q：双向链表怎么找中点？&lt;br&gt;A：头尾指针都往中间走，两个指针相等或交替的时候为中点&lt;/p&gt;
&lt;p&gt;Q：单向链表呢？&lt;br&gt;A：先走到尾记下有几个元素，然后再走到一半的地方&lt;br&gt;//面完查了下可以用快慢指针，一个指针每次走一步，另外个走两步，快指针到尾部时慢指针在中点&lt;/p&gt;
&lt;p&gt;Q：上次笔试之后有没有学到什么？&lt;br&gt;A：了解了下跨域安全和性能相关的问题&lt;/p&gt;
&lt;p&gt;Q：那你描述一下跨域安全问题吧&lt;br&gt;A：//balabala…最后发现根本讲不清楚，我还说考完之后去翻了《HTTP权威指南》，囧&lt;/p&gt;
&lt;p&gt;Q：怎么实现跨域请求？&lt;br&gt;A：JSONP，http自定义origin头部&lt;/p&gt;
&lt;p&gt;Q：只写origin就够了吗？&lt;br&gt;A：不太清楚&lt;/p&gt;
&lt;p&gt;Q：解释下TCP三次握手&lt;br&gt;A：客户端发一个SYN，服务器回一个ACK，客户端再回一个ACK&lt;/p&gt;
&lt;p&gt;Q：HTTP头中哪些是和缓存相关的？&lt;br&gt;A：ETag，cache-control。。。想不起来了&lt;/p&gt;
&lt;p&gt;Q：cookie和session有什么区别？&lt;br&gt;A：cookie在客户端，session在服务端&lt;/p&gt;
&lt;p&gt;Q：浏览器在发送cookie时会发送哪几个部分？&lt;br&gt;A：不太清楚&lt;/p&gt;
&lt;p&gt;Q：那你知道cookie有哪几个组成部分吗？&lt;br&gt;A：不太清楚&lt;/p&gt;
&lt;p&gt;Q：你有用开发者工具看过cookie吗？&lt;br&gt;A：有&lt;/p&gt;
&lt;p&gt;Q：那cookie有哪几个组成部分？&lt;br&gt;A：//已死，我的内心是崩溃的&lt;/p&gt;
&lt;p&gt;Q：我没有问题了，你还有什么问题吗？&lt;br&gt;A：//崩溃的我居然问了刚刚那个cookie的问题可以告诉我答案吗。。。估计被定位成伸手党了&lt;/p&gt;
&lt;p&gt;面完之后去前台问被告知二面挂了，然后愉快（误）地滚回了学校&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一面比较注重基础知识，这方面听到有的面试官建议多看几遍《JavaScript高级程序设计》的，现场也有看到有人随身带着这本书&lt;br&gt;(我算是粗略地读过三遍左右，也确实大多数上面问到的问题都能在书中找到答案)&lt;/li&gt;
&lt;li&gt;二面注重能力考查，无论是学习能力（问项目，问笔试收获），和后端的合作（问很多网络原理），还是编程能力（会问算法，听到有人说问二叉树翻转的）都有涉及。&lt;br&gt;面试官也明显更高端了，应该是Team Leader级别的&lt;/li&gt;
&lt;li&gt;表达能力很重要，有些概念知道却没法清楚地表达出来，影响会很大&lt;/li&gt;
&lt;li&gt;不要把话题引向自己不那么有自信的地方（比如上面的跨域问题）&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;笔试&quot;&gt;&lt;a href=&quot;#笔试&quot; class=&quot;headerlink&quot; title=&quot;笔试&quot;&gt;&lt;/a&gt;笔试&lt;/h2&gt;&lt;p&gt;选择题忽略&lt;/p&gt;
&lt;p&gt;问答题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用原生JS实现一个接口，能够用Ajax上传文件并显示上传进度，上传完成后接收一个来自服务器的json数据&lt;/li&gt;
&lt;li&gt;实现一个三列布局&lt;/li&gt;
&lt;li&gt;如何防范CSRF（跨站请求伪造）&lt;/li&gt;
&lt;li&gt;请列举减少HTTP请求数和资源文件大小的方法&lt;/li&gt;
&lt;li&gt;列举实现跨域请求的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;p&gt;一上来先是自我介绍，在这个过程中，面试官会看你的简历&lt;/p&gt;
&lt;p&gt;Q：CSS和JS熟悉哪个？&lt;br&gt;A：JS&lt;/p&gt;
&lt;p&gt;Q：浏览器端的JS包含哪几个部分？&lt;br&gt;A：ECMAScript+DOM&lt;/p&gt;
&lt;p&gt;Q：DOM包含哪些对象？&lt;br&gt;A：Node对象，然后继承下来的有Document,Element,Text，还有想不起来了&lt;/p&gt;
&lt;p&gt;Q：JS有哪些基本类型？&lt;br&gt;A：Number,String,undefined,null,还有引用类型的 //这里我少答了Boolean，然后我以为问的是数据类型&lt;/p&gt;
&lt;p&gt;Q：基本类型和引用类型有什么区别？&lt;/p&gt;
&lt;p&gt;A：赋值的时候基本类型按值，引用类型按引用，就是基本类型会复制一份，引用类型就是一个新的指针。&lt;br&gt;函数传参的时候都是按值传递&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://ziqi.moe/blog/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>Jade如何用同一模板渲染出不同文章的页面</title>
    <link href="http://ziqi.moe/blog/JS-Object-Clone/"/>
    <id>http://ziqi.moe/blog/JS-Object-Clone/</id>
    <published>2016-04-02T09:24:53.000Z</published>
    <updated>2016-04-11T06:35:43.868Z</updated>
    
    <content type="html">&lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What:&quot;&gt;&lt;/a&gt;What:&lt;/h2&gt;&lt;p&gt;在写我的&lt;a href=&quot;https://github.com/novakoki/blog-generator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog-generator&lt;/a&gt;的时候，遇到了传说中面试经常考的对象复制的问题。&lt;br&gt;在用Jade模板的时候，要用同一个模板渲染出不同的文章，就需要有不同的locals。&lt;br&gt;一开始的想法是，用Jade里面的include markdown，这样只要文件名做变量就可以了，然而事实上Jade并不支持动态include。&lt;br&gt;于是只能改用先用marked解析markdown文件为字符串然后填充进去，假设有如下内容&lt;/p&gt;
&lt;p&gt;post.jade&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;article !&amp;#123;article&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//- 这里是解析markdown后得到的字符串，会带有很多转义符号，所以用 !&amp;#123;&amp;#125;的变量表达&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;locals.json&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;articles&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title1&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;path1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;article&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;balabala...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;那么在JavaScript中就可以&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;template&#39;&lt;/span&gt;, ()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; locals = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./locals.json&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; locals.articles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    这里做markdown解析并改变locals中article的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./post.jade&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .pipe(jade(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        locals: locals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .pipe(rename(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;.html`&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//gulp.dest只能指定输出的目录而不能指定文件名，需要rename = require(&#39;gulp-rename&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后一切都是由异步引起的问题了，为了符合gulp的风格，我用stream来读取markdown文件的内容&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stream = fs.createReadStream(locals.articles[title]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stream.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, (chunk) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data += chunk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stream.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  locals.article = marked(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为显然这个过程是异步的，所以我用一个闭包来存每次迭代的title&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;template&#39;&lt;/span&gt;, ()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; locals = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./locals.json&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//这里我一度以为locals也会是在闭包环境里的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; locals.articles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((title, locals) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stream = fs.createReadStream(locals.articles[title]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stream.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, (chunk) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          data += chunk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stream.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          locals.article = marked(data); &lt;span class=&quot;comment&quot;&gt;//这里是会影响外部的locals的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./post.jade&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(jade(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            locals: locals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(rename(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;.html`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)(title, locals);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;事实上这样最终只会产生相同的页面，即最后迭代的那一次。&lt;br&gt;意识到了其中的问题所在之后，我继续做了些修改&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;template&#39;&lt;/span&gt;, ()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; locals.articles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((title) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stream = fs.createReadStream(locals.articles[title]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; locals = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./locals.json&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//喂，这样总可以每个闭包环境都有一份locals了吧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stream.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, (chunk) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          data += chunk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stream.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          locals.article = marked(data); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./post.jade&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(jade(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            locals: locals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(rename(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;.html`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)(title);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果是被第二次打脸了，于是我只好寻求复制多份原始的locals，再分别做设置。&lt;br&gt;这里我没有用比较常规的写一个递归函数或者用原型来做复制，而是选择直接操作JSON字符串。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;stream.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./post.jade&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(jade(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      locals: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;JSON.stringify(locals).slice(0,-1)&amp;#125;&lt;/span&gt;,&lt;span class=&quot;subst&quot;&gt;$&amp;#123;marked(data)&amp;#125;&lt;/span&gt;&amp;#125;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(rename(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;.html`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就用同一个模板给每篇文章都生成了一个页面，相应的，主页中需要展示一个文章摘要列表也可以做类似的实现。&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why:&quot;&gt;&lt;/a&gt;Why:&lt;/h2&gt;&lt;p&gt;回到上面的过程中，为什么我说一切问题都是由异步引起的？更确切些，可以说是由异步和引用类型引起的。&lt;/p&gt;
&lt;p&gt;首先，无论是node自身的stream还是gulp的stream，在读取或是写入时都是异步执行的，用于迭代的变量最终被用到时循环早已结束，这样的情形在DOM批量绑定事件的时候也早已见怪不怪了。&lt;/p&gt;
&lt;p&gt;一个简单的闭包可以解决问题，这么做了之后第一次修改我意识到了问题在于传参的类型，字符串、数字都在闭包中保存了一份拷贝，而引用类型或者说对象并没有，或者说在闭包中只是存了一份该指向对象指针的拷贝而已。&lt;/p&gt;
&lt;p&gt;改完之后为什么还是不对呢？确实每个闭包都有了一个locals才对啊。问题在于gulp的stream也是异步的，即gulp用到locals的时候，匿名函数调用已经结束了，locals作为局部变量已经被销毁了。&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How:&quot;&gt;&lt;/a&gt;How:&lt;/h2&gt;&lt;p&gt;《JavaScript高级程序设计》 P69-71&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入剖析 JavaScript 的深复制&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What:&quot;&gt;&lt;/a&gt;What:&lt;/h2&gt;&lt;p&gt;在写我的&lt;a href=&quot;https://github.com/novakoki/blog-generator&quot;&gt;blog-generator&lt;/a&gt;的时候，遇到了传说中面试经常考的对象复制的问题。&lt;br&gt;在用Jade模板的时候，要用同一个模板渲染出不同的文章，就需要有不同的locals。&lt;br&gt;一开始的想法是，用Jade里面的include markdown，这样只要文件名做变量就可以了，然而事实上Jade并不支持动态include。&lt;br&gt;于是只能改用先用marked解析markdown文件为字符串然后填充进去，假设有如下内容&lt;/p&gt;
&lt;p&gt;post.jade&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;article !&amp;#123;article&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//- 这里是解析markdown后得到的字符串，会带有很多转义符号，所以用 !&amp;#123;&amp;#125;的变量表达&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;locals.json&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;articles&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title1&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;path1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;article&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;balabala...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://ziqi.moe/blog/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>CSS中外边距层叠的问题</title>
    <link href="http://ziqi.moe/blog/Margin-Collapsing/"/>
    <id>http://ziqi.moe/blog/Margin-Collapsing/</id>
    <published>2016-03-31T06:31:15.000Z</published>
    <updated>2016-03-31T06:42:28.490Z</updated>
    
    <content type="html">&lt;h2 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what:&quot;&gt;&lt;/a&gt;what:&lt;/h2&gt;&lt;p&gt;Q:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; {
  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: fixed;
  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt;;
}

&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; {
  &lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问div距离窗口上边的距离是多少？&lt;/p&gt;
&lt;p&gt;A: 15px&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why:&quot;&gt;&lt;/a&gt;why:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在没有指定left，top等的情况下，它们的默认值为auto，意味着div的位置应该放在其静态位置，&lt;br&gt;即在其正常文档流中的位置。&lt;/li&gt;
&lt;li&gt;那么问题转变为，div的静态位置应该在哪？这里涉及到一个外边距层叠的问题，p元素和body有15px的margin，&lt;br&gt;在没有清除样式的情况下，浏览器默认body与html之间有不定大小的margin，这两个垂直距离上的margin会发生层叠，&lt;br&gt;即最终body与html之间有了15px的margin，所以div就和窗口上边有了15px的margin&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;how&quot;&gt;&lt;a href=&quot;#how&quot; class=&quot;headerlink&quot; title=&quot;how:&quot;&gt;&lt;/a&gt;how:&lt;/h2&gt;&lt;p&gt;BFC: &lt;a href=&quot;http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解BFC和Margin Collapse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/19823139&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何解决外边距叠加的问题？&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what:&quot;&gt;&lt;/a&gt;what:&lt;/h2&gt;&lt;p&gt;Q:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; {
  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: fixed;
  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt;;
}

&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; {
  &lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问div距离窗口上边的距离是多少？&lt;/p&gt;
&lt;p&gt;A: 15px&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://ziqi.moe/blog/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>A Note 0f Computer Network</title>
    <link href="http://ziqi.moe/blog/A-Note-0f-Computer-Network/"/>
    <id>http://ziqi.moe/blog/A-Note-0f-Computer-Network/</id>
    <published>2015-08-20T14:25:17.000Z</published>
    <updated>2016-12-11T13:44:51.217Z</updated>
    
    <content type="html">&lt;h2 id=&quot;I-Introduction&quot;&gt;&lt;a href=&quot;#I-Introduction&quot; class=&quot;headerlink&quot; title=&quot;I. Introduction&quot;&gt;&lt;/a&gt;I. Introduction&lt;/h2&gt;&lt;h3 id=&quot;1-Computer-Network-and-Distributed-System&quot;&gt;&lt;a href=&quot;#1-Computer-Network-and-Distributed-System&quot; class=&quot;headerlink&quot; title=&quot;1. Computer Network and Distributed System&quot;&gt;&lt;/a&gt;1. Computer Network and Distributed System&lt;/h3&gt;&lt;p&gt; Example: World Wide Web, Hadoop&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Uses&quot;&gt;&lt;a href=&quot;#2-Uses&quot; class=&quot;headerlink&quot; title=&quot;2. Uses&quot;&gt;&lt;/a&gt;2. Uses&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Business Application&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Resource Sharing &lt;em&gt;(Client-Server Model)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Communication Medium&lt;/li&gt;
&lt;li&gt;Electric Commerce&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Home Application&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Connectivity &lt;em&gt;(Peer-to-Peer)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Person-to-Person communication&lt;ul&gt;
&lt;li&gt;Instant Messaging (Twitter)&lt;/li&gt;
&lt;li&gt;Social Network (Facebook)&lt;/li&gt;
&lt;li&gt;Wiki (Wikipedia)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Electric Commerce (B2C, B2B, G2C, C2C, P2P)&lt;/li&gt;
&lt;li&gt;Entertainment&lt;/li&gt;
&lt;li&gt;Ubiquitous Computing (普适计算) (RFID, IOT)&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Users&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Wireless Network&lt;/li&gt;
&lt;li&gt;Text Messaging (SMS)&lt;/li&gt;
&lt;li&gt;Mobile Commerce&lt;/li&gt;
&lt;li&gt;Sensor Network&lt;/li&gt;
&lt;li&gt;Wearable Computers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Social Issues&lt;/strong&gt; (网络引起的各种社会问题)&lt;ul&gt;
&lt;li&gt;言论 (Network Neutrality)&lt;/li&gt;
&lt;li&gt;知识产权 (DMCA)&lt;/li&gt;
&lt;li&gt;隐私 (政府监控，Cookie中的信息，Gmail中的邮件，位置信息，匿名言论)&lt;/li&gt;
&lt;li&gt;垃圾信息 (Spam)&lt;/li&gt;
&lt;li&gt;网络安全 &lt;/li&gt;
&lt;li&gt;法律 (Electric Gambling)&lt;hr&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-Hardware&quot;&gt;&lt;a href=&quot;#3-Hardware&quot; class=&quot;headerlink&quot; title=&quot;3. Hardware&quot;&gt;&lt;/a&gt;3. Hardware&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sorted by &lt;strong&gt;Type&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Broadcast&lt;/li&gt;
&lt;li&gt;Point-to-Point&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sorted by &lt;strong&gt;Scale&lt;/strong&gt;&lt;br&gt;|Sorted by Scale|&lt;br&gt;|:—:|&lt;br&gt;|Internetworks|&lt;br&gt;|Wide Area Network|&lt;br&gt;|Metropolitan Area Network (城域网)|&lt;br&gt;|Local Area Network|&lt;br&gt;|Personal Area Network|&lt;hr&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-Software&quot;&gt;&lt;a href=&quot;#4-Software&quot; class=&quot;headerlink&quot; title=&quot;4. Software&quot;&gt;&lt;/a&gt;4. Software&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Layer, Protocol, Interface, Service&lt;/strong&gt;&lt;br&gt;Most networks are organized as a stack of &lt;strong&gt;layers&lt;/strong&gt;.&lt;br&gt;A &lt;strong&gt;protocol&lt;/strong&gt; is an agreement between the communicating parties on how communication is to proceed.&lt;br&gt;The &lt;strong&gt;interface&lt;/strong&gt; defines which primitive operations and services the lower layer makes available to the upper one.&lt;br&gt;A &lt;strong&gt;service&lt;/strong&gt; is a set of primitives(operations) that a layer provides to the layer above it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design Issues&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Reliability&lt;ul&gt;
&lt;li&gt;Error Detection&lt;/li&gt;
&lt;li&gt;Error Correction&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Routing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evolution&lt;ul&gt;
&lt;li&gt;Addressing or Naming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internetworking&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource Allocation&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multiplexing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flow Control&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Congestion&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Quality of Service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Connection Oriented&lt;/strong&gt; VS &lt;strong&gt;Connectionless&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Realiable communication may not be availble in a given layer;&lt;br&gt;The delays inherent in providing a reliable service may be unacceptable.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connection Oriented &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Byte Stream&lt;/strong&gt; VS &lt;strong&gt;Message Stream&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Voice over IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connectionless&lt;ul&gt;
&lt;li&gt;Datagram&lt;/li&gt;
&lt;li&gt;Request-Reply&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Service Primitive&lt;hr&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-Reference-Model&quot;&gt;&lt;a href=&quot;#5-Reference-Model&quot; class=&quot;headerlink&quot; title=&quot;5. Reference Model&quot;&gt;&lt;/a&gt;5. Reference Model&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;OSI&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;TCP/IP&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Used in the book&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Application&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Application&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Presentation&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Session&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Transport&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Transport&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Transport&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Network&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Network&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Network&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Data Link&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Link&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Data Link&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Physical&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Physical&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;6-Network-Standardization&quot;&gt;&lt;a href=&quot;#6-Network-Standardization&quot; class=&quot;headerlink&quot; title=&quot;6. Network Standardization&quot;&gt;&lt;/a&gt;6. Network Standardization&lt;/h3&gt;&lt;hr&gt;

&lt;h2 id=&quot;II-The-Physical-Layer&quot;&gt;&lt;a href=&quot;#II-The-Physical-Layer&quot; class=&quot;headerlink&quot; title=&quot;II. The Physical Layer&quot;&gt;&lt;/a&gt;II. The Physical Layer&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;It defines the electrical, timing and other interfaces by which&lt;br&gt; &lt;strong&gt;bits&lt;/strong&gt; are sent as &lt;strong&gt;signals&lt;/strong&gt; over &lt;strong&gt;channels&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-The-Theoretical-Basis-for-Data-Communication&quot;&gt;&lt;a href=&quot;#1-The-Theoretical-Basis-for-Data-Communication&quot; class=&quot;headerlink&quot; title=&quot;1. The Theoretical Basis for Data Communication&quot;&gt;&lt;/a&gt;1. The Theoretical Basis for Data Communication&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fourier Analysis&lt;/li&gt;
&lt;li&gt;Bandwidth-Limited Signals&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bandwidth&lt;/strong&gt;&lt;br&gt;  The width of the frequency range transmitted without being strongly attenuated(衰减) is called the bandwidth.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Baseband&lt;/strong&gt;&lt;br&gt;  Signals that run from 0 up to the maximum frequency are called baseband signals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Passband&lt;/strong&gt;&lt;br&gt;  Signals that are shifted to occupy a higher range of frequencies, as is the case of all wireless transmissions, are called passband signals.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Maximum Data Rate of a Channel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nyquist’s theorem&lt;br&gt;$$maximum\ data\ rate=2B\log_2V\ bits/sec$$&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shannon’s theorem&lt;br&gt;$$maximum\ data\ rate=B\log_2(1+S/N)\ bits/sec$$&lt;/p&gt;
&lt;p&gt;$$10\log_{10}S/N=1\ dB$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-Digital-Modulation&quot;&gt;&lt;a href=&quot;#2-Digital-Modulation&quot; class=&quot;headerlink&quot; title=&quot;2. Digital Modulation&quot;&gt;&lt;/a&gt;2. Digital Modulation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Baseband&lt;ul&gt;
&lt;li&gt;NRZ&lt;/li&gt;
&lt;li&gt;NRZI&lt;/li&gt;
&lt;li&gt;Manchester&lt;/li&gt;
&lt;li&gt;Bipolar&lt;/li&gt;
&lt;li&gt;4B/5B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Passband&lt;ul&gt;
&lt;li&gt;ASK&lt;/li&gt;
&lt;li&gt;FSK&lt;/li&gt;
&lt;li&gt;PSK&lt;/li&gt;
&lt;li&gt;Constellation Diagram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-Multiplexing&quot;&gt;&lt;a href=&quot;#3-Multiplexing&quot; class=&quot;headerlink&quot; title=&quot;3. Multiplexing&quot;&gt;&lt;/a&gt;3. Multiplexing&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FDM&lt;/li&gt;
&lt;li&gt;TDM&lt;/li&gt;
&lt;li&gt;CDMA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-Switching&quot;&gt;&lt;a href=&quot;#4-Switching&quot; class=&quot;headerlink&quot; title=&quot;4. Switching&quot;&gt;&lt;/a&gt;4. Switching&lt;/h3&gt;&lt;h2 id=&quot;III-The-Data-Link-Layer&quot;&gt;&lt;a href=&quot;#III-The-Data-Link-Layer&quot; class=&quot;headerlink&quot; title=&quot;III. The Data Link Layer&quot;&gt;&lt;/a&gt;III. The Data Link Layer&lt;/h2&gt;&lt;h3 id=&quot;1-Framing&quot;&gt;&lt;a href=&quot;#1-Framing&quot; class=&quot;headerlink&quot; title=&quot;1. Framing&quot;&gt;&lt;/a&gt;1. Framing&lt;/h3&gt;&lt;h2 id=&quot;IV-The-Medium-Access-Control-Sublayer&quot;&gt;&lt;a href=&quot;#IV-The-Medium-Access-Control-Sublayer&quot; class=&quot;headerlink&quot; title=&quot;IV. The Medium Access Control Sublayer&quot;&gt;&lt;/a&gt;IV. The Medium Access Control Sublayer&lt;/h2&gt;&lt;h2 id=&quot;V-The-Network-Layer&quot;&gt;&lt;a href=&quot;#V-The-Network-Layer&quot; class=&quot;headerlink&quot; title=&quot;V. The Network Layer&quot;&gt;&lt;/a&gt;V. The Network Layer&lt;/h2&gt;&lt;h2 id=&quot;VI-The-Transport-Layer&quot;&gt;&lt;a href=&quot;#VI-The-Transport-Layer&quot; class=&quot;headerlink&quot; title=&quot;VI. The Transport Layer&quot;&gt;&lt;/a&gt;VI. The Transport Layer&lt;/h2&gt;&lt;h2 id=&quot;VII-The-Application-Layer&quot;&gt;&lt;a href=&quot;#VII-The-Application-Layer&quot; class=&quot;headerlink&quot; title=&quot;VII. The Application Layer&quot;&gt;&lt;/a&gt;VII. The Application Layer&lt;/h2&gt;&lt;h2 id=&quot;VIII-Network-Security&quot;&gt;&lt;a href=&quot;#VIII-Network-Security&quot; class=&quot;headerlink&quot; title=&quot;VIII. Network Security&quot;&gt;&lt;/a&gt;VIII. Network Security&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;I-Introduction&quot;&gt;&lt;a href=&quot;#I-Introduction&quot; class=&quot;headerlink&quot; title=&quot;I. Introduction&quot;&gt;&lt;/a&gt;I. Introduction&lt;/h2&gt;&lt;h3 id=&quot;1-Computer-Network-and-Distributed-System&quot;&gt;&lt;a href=&quot;#1-Computer-Network-and-Distributed-System&quot; class=&quot;headerlink&quot; title=&quot;1. Computer Network and Distributed System&quot;&gt;&lt;/a&gt;1. Computer Network and Distributed System&lt;/h3&gt;&lt;p&gt; Example: World Wide Web, Hadoop&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Uses&quot;&gt;&lt;a href=&quot;#2-Uses&quot; class=&quot;headerlink&quot; title=&quot;2. Uses&quot;&gt;&lt;/a&gt;2. Uses&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Business Application&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Resource Sharing &lt;em&gt;(Client-Server Model)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Communication Medium&lt;/li&gt;
&lt;li&gt;Electric Commerce&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Home Application&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Connectivity &lt;em&gt;(Peer-to-Peer)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Person-to-Person communication&lt;ul&gt;
&lt;li&gt;Instant Messaging (Twitter)&lt;/li&gt;
&lt;li&gt;Social Network (Facebook)&lt;/li&gt;
&lt;li&gt;Wiki (Wikipedia)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Electric Commerce (B2C, B2B, G2C, C2C, P2P)&lt;/li&gt;
&lt;li&gt;Entertainment&lt;/li&gt;
&lt;li&gt;Ubiquitous Computing (普适计算) (RFID, IOT)
    
    </summary>
    
    
      <category term="课堂笔记" scheme="http://ziqi.moe/blog/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>换壳</title>
    <link href="http://ziqi.moe/blog/Migration/"/>
    <id>http://ziqi.moe/blog/Migration/</id>
    <published>2015-08-14T08:24:33.000Z</published>
    <updated>2016-03-28T01:46:28.277Z</updated>
    
    <content type="html">&lt;p&gt;以前的博客托管在&lt;a href=&quot;http://www.openshift.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;openshift&lt;/a&gt;上，免费能访问但是延时有点高，没有root权限，用的是&lt;a href=&quot;http://wordpress.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wordpress&lt;/a&gt;，也不常去动它，有时也会感觉插件纷繁复杂，显得有些笨重。上个月买了&lt;a href=&quot;https://www.digitalocean.com/?refcode=b0c59420cd4c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DigitalOcean&lt;/a&gt;的VPS，服务器的自由度大增，因为还有一些笔记类的文章写在&lt;a href=&quot;http://zybuluo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cmd Markdown&lt;/a&gt;里了，于是就准备换成比较轻型且支持markdown较好的博客，最终选了基于&lt;a href=&quot;http://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node.js&lt;/a&gt;的&lt;a href=&quot;http://www.ghostchina.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ghost&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;一开始买VPS主要是因为之前在用的某些服务要退出江湖了，然后看了&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTEzMTUwNA==&amp;amp;mid=210457700&amp;amp;idx=1&amp;amp;sn=322d1e4c13d3f33ade848e3889c410bf&amp;amp;scene=5#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;余弦大大的文章&lt;/a&gt;，自己架了梯子，经过了一些优化之后，访问速度也很不错，能够油管720p无压力。这中间还深切地感受到计网没有学好，传输层那一章没有好好听，结果网络优化有很多都是TCP拥塞控制相关的内容，本来可以first principle的，最后还是沦为analogy了。&lt;/p&gt;
&lt;p&gt;回到博客，大二以来就在技术的路上原地踏步了，数据结构、计组和计网确实很重要，但是不能够也不足以占据全部的时间，这一年除了写了一些数据结构代码和计组的HDL代码之外几乎没再写过程序，这个现象让人警醒。暑假之后在前端上算是走出了一步，Udacity上的课程值得后续做一些笔记，包括baidu-ife的项目也需要总结（虽然是要烂尾的节奏了）。之后看犀牛书和js高程也是很有启发的，在这之前，每次遇到问题都选择去看看别人的代码，复制粘贴一段之类的，或是自己埋头去想如何解决，潜下心来深入地阅读才猛觉杨绛先生所说的想的太多读的太少是真理。大概前端这个领域，每个人都希望做得很炫，我也希望能够make something awesome，但如今我还是会想起初学编程的时候看到的侯捷老师那句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序设计领域里，每一个人都想飞。 但是，还没学会走之前，连跑都别想！  ——侯捷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一年我看到很多人能跑了，我还会继续往前走，想着有哪一天我也该起跑了吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以前的博客托管在&lt;a href=&quot;http://www.openshift.com&quot;&gt;openshift&lt;/a&gt;上，免费能访问但是延时有点高，没有root权限，用的是&lt;a href=&quot;http://wordpress.org&quot;&gt;wordpress&lt;/a&gt;，也不常去动它，有时也会感觉插件纷繁复杂，显得有些笨重。上个月买了&lt;a href=&quot;https://www.digitalocean.com/?refcode=b0c59420cd4c&quot;&gt;DigitalOcean&lt;/a&gt;的VPS，服务器的自由度大增，因为还有一些笔记类的文章写在&lt;a href=&quot;http://zybuluo.com&quot;&gt;Cmd Markdown&lt;/a&gt;里了，于是就准备换成比较轻型且支持markdown较好的博客，最终选了基于&lt;a href=&quot;http://nodejs.org&quot;&gt;node.js&lt;/a&gt;的&lt;a href=&quot;http://www.ghostchina.com/&quot;&gt;ghost&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ziqi.moe/blog/tags/eassy/"/>
    
  </entry>
  
  <entry>
    <title>分治法</title>
    <link href="http://ziqi.moe/blog/DIVIDE-AND-CONQUER/"/>
    <id>http://ziqi.moe/blog/DIVIDE-AND-CONQUER/</id>
    <published>2015-02-12T16:00:00.000Z</published>
    <updated>2016-12-11T13:45:34.149Z</updated>
    
    <content type="html">&lt;h4 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h4&gt;&lt;h4 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;分割成很多个同类型的子问题(&lt;strong&gt;Divide&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;递归地解决这些子问题(&lt;strong&gt;Conquer&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;合并子问题的答案(&lt;strong&gt;Combine&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;主序定理-The-Master-Method&quot;&gt;&lt;a href=&quot;#主序定理-The-Master-Method&quot; class=&quot;headerlink&quot; title=&quot;主序定理(The Master Method)&quot;&gt;&lt;/a&gt;主序定理(The Master Method)&lt;/h1&gt;&lt;p&gt;对于递推式：&lt;br&gt;$$T(n)=aT(n/b)+O(n^d)$$&lt;br&gt;有如下结论：&lt;/p&gt;
&lt;p&gt;$$T(n)=\begin{cases}&lt;br&gt;&amp;amp;O(n^d)&amp;amp;\text{if}&amp;amp;d\gt\log_ba\[2ex]&lt;br&gt;&amp;amp;O(n^d\log n)&amp;amp;\text{if}&amp;amp;d=\log_ba\[2ex]&lt;br&gt;&amp;amp;O(n^{\log_ba})&amp;amp;\text{if}&amp;amp;d\lt\log_ba&lt;br&gt;\end{cases}$$ &lt;/p&gt;
&lt;h1 id=&quot;经典算法&quot;&gt;&lt;a href=&quot;#经典算法&quot; class=&quot;headerlink&quot; title=&quot;经典算法&quot;&gt;&lt;/a&gt;经典算法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;整数乘法(Karatsuba Multiplication)&lt;/li&gt;
&lt;li&gt;归并排序(Mergesort)&lt;/li&gt;
&lt;li&gt;逆序数(Counting Inversions)&lt;/li&gt;
&lt;li&gt;最近点对(Closest Pair)&lt;/li&gt;
&lt;li&gt;矩阵乘法(Strassen’s Subcubic Matrix Multiplication)&lt;/li&gt;
&lt;li&gt;快速排序(Quicksort)&lt;/li&gt;
&lt;li&gt;选择问题(Selection)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h4&gt;&lt;h4 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;分割成很多个同类型的子问题(&lt;strong&gt;Divide&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;递归地解决这些子问题(&lt;strong&gt;Conquer&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;合并子问题的答案(&lt;strong&gt;Combine&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://ziqi.moe/blog/tags/algo/"/>
    
  </entry>
  
  <entry>
    <title>在快速排序中选择好的枢纽点</title>
    <link href="http://ziqi.moe/blog/Choose-Good-Pivot-In-Quciksort/"/>
    <id>http://ziqi.moe/blog/Choose-Good-Pivot-In-Quciksort/</id>
    <published>2015-02-12T16:00:00.000Z</published>
    <updated>2016-12-11T13:45:04.065Z</updated>
    
    <content type="html">&lt;p&gt;快速排序是一个典型的分治(DIVIDE-AND-CONQUER)算法.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QuickSort(array A,length n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pivot = ChoosePivot(A,n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Partition A around pivot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Recursively sort &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;st part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Recursively sort &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;nd part&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而决定这个算法效率的关键就在于枢纽点(pivot)的选取，因为这直接影响到分割(partition)的好坏。最坏情况下，即每次选取的枢纽点都为最大或最小的数，则时间复杂度为 $\theta(n^2)$ .而如果能够奇迹般地每次都选择了中位数，时间复杂度就为 $\theta(n \log n)$ .以上都为理想情况的分析，而对于排序来说，效率的衡量在于比较次数。以下对各种枢纽点的选取方法做一个比较次数的测量，数据为10000个0~9999之间的整数。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选取首尾元素&lt;br&gt;首：162085次比较&lt;br&gt;尾：164123&lt;/p&gt;
&lt;p&gt;这种方法的效率取决于输入数据的预排序程度，如果是已经有序的状态，则效率很低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三数中值分割法，即选择下标为第一个、最后一个、中间的三个数的中位数作枢纽点&lt;br&gt;138382&lt;/p&gt;
&lt;p&gt;效率很高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;随机选取枢纽点&lt;br&gt;测试了五次：&lt;br&gt;148958，149598，163443，161712，161399&lt;/p&gt;
&lt;p&gt;随机选取枢纽点无疑是安全的，因为不可能每次都选中最坏的情形。但是另一方面，随机数的生成也耗费了时间，对实际排序的时间造成了影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;所用的数据：&lt;br&gt;&lt;a href=&quot;http://spark-public.s3.amazonaws.com/algo1/programming_prob/QuickSort.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spark-public.s3.amazonaws.com/algo1/programming_prob/QuickSort.txt&lt;/a&gt;&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/2397&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/2397&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考代码：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* A,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lo,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hi)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	三数中值分割法 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	int a = A[lo];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	int b = A[hi];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	int c = A[(lo+hi)/2];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	if(( (a&amp;gt;=b) &amp;amp;&amp;amp; (a&amp;lt;=c) ) || ( (a&amp;gt;=c) &amp;amp;&amp;amp; (a&amp;lt;=b) ))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		return lo;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	if(((b&amp;gt;=a)&amp;amp;&amp;amp;(b&amp;lt;=c))||((b&amp;gt;=c)&amp;amp;&amp;amp;(b&amp;lt;=a)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		return hi;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	if(((c&amp;gt;=b)&amp;amp;&amp;amp;(c&amp;lt;=a))||((c&amp;gt;=a)&amp;amp;&amp;amp;(c&amp;lt;=b)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		return (lo+hi)/2;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//首尾 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//return lo;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//return hi;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//随机 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//srand((int)time(0));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//return lo + rand()%(hi-lo);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; a,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* A,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l == r+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	for(int i = 0;i &amp;lt; 10;i++)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		cout&amp;lt;&amp;lt;A[i]&amp;lt;&amp;lt;&quot; &quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	cout&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p = pivot(A,l,r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//cout&amp;lt;&amp;lt;A[p]&amp;lt;&amp;lt;&quot; &quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	swap(A[l],A[p]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = l + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = l + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j &amp;lt;= r;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(A[j] &amp;lt; A[l])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			swap(A[j],A[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sum++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	swap(A[l],A[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	QuickSort(A,l,i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	QuickSort(A,i,r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;快速排序是一个典型的分治(DIVIDE-AND-CONQUER)算法.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QuickSort(array A,length n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pivot = ChoosePivot(A,n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Partition A around pivot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Recursively sort &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;st part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Recursively sort &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;nd part&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而决定这个算法效率的关键就在于枢纽点(pivot)的选取，因为这直接影响到分割(partition)的好坏。最坏情况下，即每次选取的枢纽点都为最大或最小的数，则时间复杂度为 $\theta(n^2)$ .而如果能够奇迹般地每次都选择了中位数，时间复杂度就为 $\theta(n \log n)$ .以上都为理想情况的分析，而对于排序来说，效率的衡量在于比较次数。以下对各种枢纽点的选取方法做一个比较次数的测量，数据为10000个0~9999之间的整数。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://ziqi.moe/blog/tags/algo/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning : Linear Regression</title>
    <link href="http://ziqi.moe/blog/Machine-Learning-Linear-Regression/"/>
    <id>http://ziqi.moe/blog/Machine-Learning-Linear-Regression/</id>
    <published>2015-02-07T13:10:00.000Z</published>
    <updated>2016-12-11T13:45:57.129Z</updated>
    
    <content type="html">&lt;p&gt;线性回归即用线性函数对因变量和一个或多个自变量之间的关系进行建模。这个函数是多个称为回归系数的参数的线性组合。&lt;/p&gt;
&lt;p&gt;给定数据集（n个变量，m组数据） &lt;/p&gt;
&lt;p&gt;用矩阵来表示数据集&lt;br&gt;$$&lt;br&gt;X=&lt;br&gt;\begin{pmatrix}&lt;br&gt;1&amp;amp;x_{11}&amp;amp;x_{21}&amp;amp;\cdots&amp;amp;x_{n1}\\&lt;br&gt;\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\\&lt;br&gt;1&amp;amp;x_{1m}&amp;amp;x_{2m}&amp;amp;\cdots&amp;amp;x_{nm}&lt;br&gt;\end{pmatrix}&lt;br&gt;$$&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;$$&lt;br&gt;Y=&lt;br&gt;\begin{pmatrix}&lt;br&gt;y_1\\&lt;br&gt;\vdots\\&lt;br&gt;y_m&lt;br&gt;\end{pmatrix}&lt;br&gt;$$&lt;br&gt;用最小二乘法，即要寻找一个函数&lt;br&gt;$$h_\theta(x)=x\theta$$&lt;br&gt;其中$\theta$ 为参数，$\theta=\begin{pmatrix}&lt;br&gt;\theta_0\\&lt;br&gt;\theta_1\\&lt;br&gt;\vdots\\&lt;br&gt;\theta_m&lt;br&gt;\end{pmatrix}$ ,&lt;br&gt;$h_{\theta}(X)$ 叫做Hypothesis&lt;/p&gt;
&lt;p&gt;使得$$J(\theta)=\frac1{2m}\sum_{i=1}^{m}{(h_{\theta}(x^{(i)})-y_i)^2}$$最小，此处$$x^{(i)}=&lt;br&gt;\begin{pmatrix}&lt;br&gt;x_{i1}&amp;amp;x_{i2}&amp;amp;\cdots&amp;amp;x_{in}&lt;br&gt;\end{pmatrix}&lt;br&gt;$$，$J(\theta)$叫做Cost Function&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;###非迭代法(Normal Equation)&lt;br&gt;$$\theta=(X^T X)^{-1}X^TY$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以不用考虑数据的scale，即每个变量取值范围之间的差距 &lt;/li&gt;
&lt;li&gt;大量矩阵运算，尤其是求逆运算复杂度较高，不适于大量数据，$O(n^3)$&lt;/li&gt;
&lt;li&gt;$X^TX$可能出现奇异的情况，原因：&lt;ol&gt;
&lt;li&gt;自变量太多而数据不够，即 $m\lt n$，可以考虑删除一些&lt;/li&gt;
&lt;li&gt;自变量冗余，即有两个或以上变量线性相关&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###迭代法(梯度下降，Gradient Descent)&lt;br&gt;$$Repeat:{\&lt;br&gt;\theta_j:=\theta_j-\alpha\frac1m\sum_{i=1}^m{(h_{\theta}(x^{(i)})-y_i)^2}x_j^{(i)}\&lt;br&gt;}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要判断算法是否已经正确执行，即如何确定稳定。可以观察$J(\theta)$图像，也可以给定一个值，当迭代后的减少量小于该值就认为迭代结束&lt;/li&gt;
&lt;li&gt;要考虑数据的scale，否则出现梯度下降困难。可以把每个自变量的取值范围都统一到一定的区间内，如：&lt;br&gt;$$x_i:=\frac{x_i-\mu_i}{S_i}$$&lt;br&gt;使得$-1\lt x_i\lt1$，其中$\mu_i$为均值，$S_i$为取值范围&lt;/li&gt;
&lt;li&gt;要考虑速率 $\alpha$，太大容易出现迭代后增加而非减少，太小则运行时间延长。可以尝试从小的值逐渐增大并观察$J(\theta)$图像变化&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;线性回归即用线性函数对因变量和一个或多个自变量之间的关系进行建模。这个函数是多个称为回归系数的参数的线性组合。&lt;/p&gt;
&lt;p&gt;给定数据集（n个变量，m组数据） &lt;/p&gt;
&lt;p&gt;用矩阵来表示数据集&lt;br&gt;$$&lt;br&gt;X=&lt;br&gt;\begin{pmatrix}&lt;br&gt;1&amp;amp;x_{11}&amp;amp;x_{21}&amp;amp;\cdots&amp;amp;x_{n1}\\&lt;br&gt;\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\\&lt;br&gt;1&amp;amp;x_{1m}&amp;amp;x_{2m}&amp;amp;\cdots&amp;amp;x_{nm}&lt;br&gt;\end{pmatrix}&lt;br&gt;$$&lt;br&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://ziqi.moe/blog/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning : Introduction</title>
    <link href="http://ziqi.moe/blog/Machine-Learning-Introduction/"/>
    <id>http://ziqi.moe/blog/Machine-Learning-Introduction/</id>
    <published>2015-02-06T16:00:00.000Z</published>
    <updated>2016-12-11T13:45:47.274Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;Old&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Field of study that gives computers the ability to learn without being explicitly programmed&lt;br&gt; —— Arthur Samuel (1959)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mordern &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E&lt;br&gt;—— Tom Mitchell (1998)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;算法分类&quot;&gt;&lt;a href=&quot;#算法分类&quot; class=&quot;headerlink&quot; title=&quot;算法分类&quot;&gt;&lt;/a&gt;算法分类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;监督学习(Supervised Learning)&lt;br&gt; 特点：”Right answers given”&lt;br&gt; 即有训练集(training set)，包含输入和期望的输出&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;回归 (Regression)&lt;/strong&gt;&lt;br&gt; Predict &lt;strong&gt;continous&lt;/strong&gt; valued output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分类 (Classification)&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;Discreted&lt;/strong&gt; valued output（判断是或不是）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非监督学习(Unsupervised Learning)&lt;br&gt; 即没有训练集，譬如典型的根据相似度进行分类，但并不知道某一类是什么&lt;/li&gt;
&lt;li&gt;其他还有增强学习(Reinforcement Learning), 推荐系统(Recommender Systems)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;Old&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Field of study that gives computers the ability to learn without being explicitly programmed&lt;br&gt; —— Arthur Samuel (1959)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mordern &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E&lt;br&gt;—— Tom Mitchell (1998)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://ziqi.moe/blog/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>内存泄漏</title>
    <link href="http://ziqi.moe/blog/Memory-Leak/"/>
    <id>http://ziqi.moe/blog/Memory-Leak/</id>
    <published>2015-02-04T13:25:09.000Z</published>
    <updated>2016-03-28T01:46:12.833Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;不能记住过去的人, 被迫重复过去.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个标题似乎表示我正准备写一篇技术文章，可惜才疏学浅（操作系统都没学在这儿BB什么！），这只是一篇偷换概念的普通随笔而已。为什么说内存泄漏呢？因为我这个人已经实实在在处于内存泄漏状态了。&lt;/p&gt;
&lt;p&gt;自从大一暑假以来，以下代码描述了我的真实状态&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; learning_area T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (found_new_interest)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T* p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; learning_area();&lt;span class=&quot;comment&quot;&gt;//同学你的指针用一次就找不到了！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;learn_three_days();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;rest_two_days();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//同学你的delete去哪儿了？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//同学你醒醒你醒醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后只能睡一觉重启了&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;细数一下有多少野指针：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web开发（包括HTML、CSS、JavaScript、PHP、Bootstrap…balabala）&lt;/li&gt;
&lt;li&gt;Python（现在也扯上Web了）&lt;/li&gt;
&lt;li&gt;Git（版本控制什么高大上的都没用过，纯粹在当代码仓库）&lt;/li&gt;
&lt;li&gt;Tex（为了以后写论文会用到吗？）&lt;/li&gt;
&lt;li&gt;网络安全（XSS、sql注入、nmap、burp、密码字典暴力破解，好像都没成功过）&lt;/li&gt;
&lt;li&gt;数据结构和算法分析（说好的大二上认真学算法的呢？）&lt;/li&gt;
&lt;li&gt;机器人&lt;/li&gt;
&lt;li&gt;图形图像(OpenCV大法？）&lt;/li&gt;
&lt;li&gt;机器学习（寒假没事干看一看Andrew Ng的课）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再算上大一下的安卓，好的，内存已经溢出了。&lt;/p&gt;
&lt;p&gt;好的，内存整理第一阶段终于算是完成了。&lt;/p&gt;
&lt;p&gt;总结一下问题所在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有输出，内存不够用还有硬盘啊&lt;/li&gt;
&lt;li&gt;每次都是三天打渔两天晒网的，没有一个能打的，别人问个问题秒秒钟倒下&lt;/li&gt;
&lt;li&gt;输入范围太大，资源密集症，这真的是最好的时代，MOOC、文档、博客一堆堆，但对于选择来说也是极其困难的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，野指针又乱飞了。得重启下了，明天继续内存整理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不能记住过去的人, 被迫重复过去.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个标题似乎表示我正准备写一篇技术文章，可惜才疏学浅（操作系统都没学在这儿BB什么！），这只是一篇偷换概念的普通随笔而已。为什么说内存泄漏呢？因为我这个人已经实实在在处于内存泄漏状态了。&lt;/p&gt;
&lt;p&gt;自从大一暑假以来，以下代码描述了我的真实状态&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; learning_area T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (found_new_interest)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T* p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; learning_area();&lt;span class=&quot;comment&quot;&gt;//同学你的指针用一次就找不到了！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;learn_three_days();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;rest_two_days();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//同学你的delete去哪儿了？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//同学你醒醒你醒醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后只能睡一觉重启了&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ziqi.moe/blog/tags/eassy/"/>
    
  </entry>
  
  <entry>
    <title>数据结构讲义中的格言</title>
    <link href="http://ziqi.moe/blog/Motto-In-Data-Structure/"/>
    <id>http://ziqi.moe/blog/Motto-In-Data-Structure/</id>
    <published>2014-11-22T11:34:00.000Z</published>
    <updated>2016-03-28T01:43:41.281Z</updated>
    
    <content type="html">&lt;p&gt;来自清华大学邓俊辉教授的数据结构讲义&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computer science should be called computing science, for the same&lt;br&gt;reason why surgery is not called knife science.&lt;br&gt;—— E. Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算模型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To measure is to know.&lt;br&gt;If you can not measure it,you can not improve it.&lt;br&gt;—— Lord Kelvin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大O记号&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mathematics is more in need of good notations than of new theorems.&lt;br&gt;—— Alan Turing&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;好读书不求甚解&lt;br&gt;每有会意，便欣然忘食&lt;br&gt;—— 陶渊明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;算法分析&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He calculated just as men breath, as eagle sustain themselves in the air.&lt;br&gt;—— Francois Arago&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;迭代与递归&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;迭代乃人工，递归方神通&lt;br&gt;To iterate is human, to recurse, divine.&lt;/p&gt;
&lt;p&gt;凡治众如治寡，分数是也&lt;br&gt;The control of a large force is the same principle as the control of a few men: it is merely a question of dividing up their numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;局限&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不学诗，何以言&lt;br&gt;不学礼，何以立&lt;br&gt;—— 《论语》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;排序与下界&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两个吃罢饭，又走了四五十里，却来到一市镇上，地名唤做瑞龙镇，却是个三岔路口。宋江借问那里人道：“小人们欲投二龙山、清风镇上，不知从那条路去？”&lt;br&gt;—— 《水浒传》&lt;/p&gt;
&lt;p&gt;不怕不识货，就怕货比货&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;向量&quot;&gt;&lt;a href=&quot;#向量&quot; class=&quot;headerlink&quot; title=&quot;向量&quot;&gt;&lt;/a&gt;向量&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;有序向量：唯一化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everybody is different.&lt;br&gt;Everybody has different styles.&lt;br&gt;Just do the best way you know how.&lt;br&gt;—— Vince Carter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有序向量：二分查找&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;群猴道：“自从爷爷去后，这山被二郎菩萨点上火，烧杀了大半。我们蹲在井里，钻在涧内，藏于铁板桥下，得了性命。及至火灭烟消，出来时，又没花果养赡，难以存活，别处又去了一半。我们这一半，捱苦的住在山中，这两年，又被些打猎的抢了一半去也。”&lt;br&gt;—— 《西游记》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;归并排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think there is a world market for about five computers.&lt;br&gt;—— T.J.Watson, 1943&lt;/p&gt;
&lt;p&gt;天下大势，分久必合，合久必分&lt;br&gt;—— 《三国演义》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;接口与实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t lose the link.&lt;br&gt;—— Robin Milner&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当下又选了几样果菜与凤姐送去，凤姐儿也送了几样来&lt;br&gt;—— 《红楼梦》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一语未了,只见宝玉笑嘻嘻了一枝红梅进来,众丫鬟忙已接过,插入瓶内&lt;br&gt;—— 《红楼梦》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;归并排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;四牡孔阜,六辔在手&lt;br&gt;骐骝是中,騧骊是骖&lt;br&gt;龙盾之合,鋈以觼軜&lt;br&gt;—— 《国风·秦风·小戎》&lt;/p&gt;
&lt;p&gt;曰两美其必合兮,孰信修而慕之？&lt;br&gt;思九州之博大兮,岂惟是其有女？&lt;br&gt;—— 《离骚》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;栈与队列&quot;&gt;&lt;a href=&quot;#栈与队列&quot; class=&quot;headerlink&quot; title=&quot;栈与队列&quot;&gt;&lt;/a&gt;栈与队列&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;栈接口与实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;陛下用群臣，如积薪耳，后来者居上&lt;br&gt;—— 《史记·汲郑列传》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈应用：进制转换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hickory,Dickory,Dock&lt;br&gt;The mouse ran up the clock&lt;br&gt;—— Nursery Rhyme Medly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈应用：中缀表达式求值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知实而不知名，知名而不知实，皆不知也&lt;br&gt;—— 王夫之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逆波兰表达式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将欲去之，必固举之&lt;br&gt;将欲夺之，必固予之&lt;br&gt;将欲灭之，必先学之&lt;br&gt;—— 《老子》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;试探回溯法：迷宫寻径&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When all else fails, try brute-force.&lt;br&gt;—— Anonymous&lt;/p&gt;
&lt;p&gt;No matter where they take us, we’ll find our way back.&lt;br&gt;—— “No matter what”, Boyzone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;树&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two roads diverged in a yellow wood&lt;br&gt;And sorry I could not travel both&lt;br&gt;—— Robin Frost, 1915&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先序遍历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真君曰：“昔吕洞宾居庐山而成仙，鬼谷子居云梦而得道，今或无此吉地么？”&lt;br&gt;璞曰：“有！但当遍历耳。”&lt;br&gt;—— 《警世通言》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后序遍历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大宗百世不迁，小宗五世则迁&lt;br&gt;—— 《礼记·大传》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;概述&lt;blockquote&gt;
&lt;p&gt;here’s nothing hidden in your head&lt;br&gt;The Sorting Hat can’t see,&lt;br&gt;So try me on and I will tell you&lt;br&gt;Where you ought to be.&lt;br&gt;—— Harry Potter and The Sorcecer’s Stone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;待续&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;来自清华大学邓俊辉教授的数据结构讲义&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computer science should be called computing science, for the same&lt;br&gt;reason why surgery is not called knife science.&lt;br&gt;—— E. Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算模型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To measure is to know.&lt;br&gt;If you can not measure it,you can not improve it.&lt;br&gt;—— Lord Kelvin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大O记号&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mathematics is more in need of good notations than of new theorems.&lt;br&gt;—— Alan Turing&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://ziqi.moe/blog/tags/algo/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started On Android</title>
    <link href="http://ziqi.moe/blog/Getting-Started-On-Android/"/>
    <id>http://ziqi.moe/blog/Getting-Started-On-Android/</id>
    <published>2014-03-05T13:23:40.000Z</published>
    <updated>2016-03-27T13:24:15.821Z</updated>
    
    <content type="html">&lt;p&gt;This term I ,or should be we,decided to develop an android app.So recently I have been searching for some resources online.For example,the class I mentioned ever on Cousera. However, sometimes I would be fed up with the speed of the teacher and I can’t still watch the videos. Maybe I need a book.Luckily I found a set of documents on the android official website.Then I realize that once you have any problem,your first choice to solve it should be the android official reference.The introduction of all APIs and classes you may use is just there,waiting for you.But sometimes I also feel it would be a little hard to fetch what you need because of the large quantity of information. How lucky!Google has written a tutorial for the beginner like me.You can just follow its steps,introduction,and tips. Well,let me make a summary of my beginning. First,I learn how to create an android application project.And in this process some points as followings:&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;The package name of app should be unique and it can’t be changed later.&lt;br&gt;The minimum required SDK determines your app’s compatibility but can be changed later.&lt;br&gt;And you can edit your app’s icon and the kind of the main activity.&lt;br&gt;Second,building a simple UI.&lt;/p&gt;
&lt;p&gt;Finally,starting another activity,making communication along activities and transferring simple data like text.&lt;/p&gt;
&lt;p&gt;Well,so I’m getting started and I will work harder!Come on!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This term I ,or should be we,decided to develop an android app.So recently I have been searching for some resources online.For example,the class I mentioned ever on Cousera. However, sometimes I would be fed up with the speed of the teacher and I can’t still watch the videos. Maybe I need a book.Luckily I found a set of documents on the android official website.Then I realize that once you have any problem,your first choice to solve it should be the android official reference.The introduction of all APIs and classes you may use is just there,waiting for you.But sometimes I also feel it would be a little hard to fetch what you need because of the large quantity of information. How lucky!Google has written a tutorial for the beginner like me.You can just follow its steps,introduction,and tips. Well,let me make a summary of my beginning. First,I learn how to create an android application project.And in this process some points as followings:&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Websites Recommendation</title>
    <link href="http://ziqi.moe/blog/Websites-Recommendation/"/>
    <id>http://ziqi.moe/blog/Websites-Recommendation/</id>
    <published>2014-03-02T13:18:00.000Z</published>
    <updated>2016-03-28T01:46:17.845Z</updated>
    
    <content type="html">&lt;p&gt;Last night, I read a passage on Zhihu Daily.It recommended lots of wonderful websites to learn online.I also noted some websites that was fresh for me.So here I decide to try to sort out some excellent websites I have already known.Definitely that means I will update this list when I find more.And I’m sorry that this list may almost match my own hobbies,such as coding.&lt;/p&gt;
&lt;p&gt;MOOCs(Massive Open Online Course):&lt;/p&gt;
&lt;p&gt;Coursera(Maybe the most popular MOOC website)&lt;/p&gt;
&lt;p&gt;edX(Almost from Harvard and MIT)&lt;/p&gt;
&lt;p&gt;Udacity(The course archive is always there)&lt;/p&gt;
&lt;p&gt;XuetangX(Chinese courses offered by Tsinghua University)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Some others:&lt;/p&gt;
&lt;p&gt;Khan Academy&lt;/p&gt;
&lt;p&gt;Free Online Classes(A collection of online courses)&lt;/p&gt;
&lt;p&gt;Netease Open Course&lt;/p&gt;
&lt;p&gt;Netease Cloud Course(To learn skills)&lt;/p&gt;
&lt;p&gt;Howzhi(A community to share knowledge)&lt;/p&gt;
&lt;p&gt;Ideas and thoughts:&lt;/p&gt;
&lt;p&gt;TED(Ideas worth spreading)&lt;/p&gt;
&lt;p&gt;Solve for X(A think tank project launched by Google to incite collaboration to solve global issues)&lt;/p&gt;
&lt;p&gt;Coding:&lt;/p&gt;
&lt;p&gt;Codecademy(Strongly recommended,A interactive learning website for Web (HTML, CSS, JavaScript, and PHP), Ruby, Python, and Miscellaneous)&lt;/p&gt;
&lt;p&gt;Stackoverflow(A Q&amp;amp;A website)&lt;/p&gt;
&lt;p&gt;Lynda(To learn computer skills)&lt;/p&gt;
&lt;p&gt;Opensourceforce(There’re lots of IT pioneers)&lt;/p&gt;
&lt;p&gt;Resource Library:&lt;/p&gt;
&lt;p&gt;For me,this is my online library to get resource I need.&lt;/p&gt;
&lt;p&gt;First,some Q&amp;amp;A websites.&lt;/p&gt;
&lt;p&gt;Zhihu(If I answer a question and can get the most approval,I can even forget the tasty of meat)&lt;/p&gt;
&lt;p&gt;In fact,it can be difficult to find those wonderful answers. So first you need to notice some core users.They are clever,knowledgeable and most important helpful.They can help you broaden your horizon.And also you can install Zhihu’s app on your smartphone. Zhihu Daily can be wonderful,there’re some excellent answers selected to publish every day.And what’s more,there’s Zhihu Roundtable.&lt;/p&gt;
&lt;p&gt;There’s a list of users that is worth noticing.Click here.&lt;/p&gt;
&lt;p&gt;Quora(Maybe better than Zhihu)&lt;/p&gt;
&lt;p&gt;Also there’s a list of recommended users on Quora.Click here.&lt;/p&gt;
&lt;p&gt;And as I just mentioned,Stackoverflow.&lt;/p&gt;
&lt;p&gt;Second,some communities.&lt;/p&gt;
&lt;p&gt;Douban(Books,movies,music,groups etc.)&lt;/p&gt;
&lt;p&gt;I like Douban because I can always get some surprise every day and learn to change my life little by little.&lt;/p&gt;
&lt;p&gt;CSDN(An IT community)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Last night, I read a passage on Zhihu Daily.It recommended lots of wonderful websites to learn online.I also noted some websites that was fresh for me.So here I decide to try to sort out some excellent websites I have already known.Definitely that means I will update this list when I find more.And I’m sorry that this list may almost match my own hobbies,such as coding.&lt;/p&gt;
&lt;p&gt;MOOCs(Massive Open Online Course):&lt;/p&gt;
&lt;p&gt;Coursera(Maybe the most popular MOOC website)&lt;/p&gt;
&lt;p&gt;edX(Almost from Harvard and MIT)&lt;/p&gt;
&lt;p&gt;Udacity(The course archive is always there)&lt;/p&gt;
&lt;p&gt;XuetangX(Chinese courses offered by Tsinghua University)&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ziqi.moe/blog/tags/eassy/"/>
    
  </entry>
  
  <entry>
    <title>世界，你好！</title>
    <link href="http://ziqi.moe/blog/Hello-World/"/>
    <id>http://ziqi.moe/blog/Hello-World/</id>
    <published>2014-02-28T13:13:41.000Z</published>
    <updated>2016-03-28T01:46:36.611Z</updated>
    
    <content type="html">&lt;p&gt;大多数语言的第一课大概都会是“Hello World!”吧，所以，我也从此开始记录生活，记录我的独白。或许这是为了能在纷繁复杂、兵荒马乱的岁月里，停下来，给自己一面镜子，映出那些终将遗失的美好，那些轻易忘记的丑陋。&lt;/p&gt;
&lt;p&gt;世界，你好！&lt;/p&gt;
&lt;p&gt;晚安，世界！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大多数语言的第一课大概都会是“Hello World!”吧，所以，我也从此开始记录生活，记录我的独白。或许这是为了能在纷繁复杂、兵荒马乱的岁月里，停下来，给自己一面镜子，映出那些终将遗失的美好，那些轻易忘记的丑陋。&lt;/p&gt;
&lt;p&gt;世界，你好！&lt;/p&gt;
&lt;p&gt;晚安，世界！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ziqi.moe/blog/tags/eassy/"/>
    
  </entry>
  
</feed>
