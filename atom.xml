<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Consolas</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://ziqi.moe/blog/"/>
  <updated>2017-03-01T09:44:31.067Z</updated>
  <id>http://ziqi.moe/blog/</id>
  
  <author>
    <name>Ziqi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Note of Programming Languages (3)</title>
    <link href="http://ziqi.moe/blog/A-Note-of-Programming-Languages-Ruby/"/>
    <id>http://ziqi.moe/blog/A-Note-of-Programming-Languages-Ruby/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2017-03-01T09:44:31.067Z</updated>
    
    <content type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数式 (Functional)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;面向对象 (Object-Oriented)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;静态 (Static)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ML&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;动态 (Dynamic)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Racket&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Ruby-Part&quot;&gt;&lt;a href=&quot;#Ruby-Part&quot; class=&quot;headerlink&quot; title=&quot;Ruby Part&quot;&gt;&lt;/a&gt;Ruby Part&lt;/h1&gt;&lt;p&gt;Ruby 有如下重要特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯面向对象(pure OOP)：Ruby 中的所有值都是对象，每个表达式执行后都得到一个对象（有些面向对象语言不是这样，比如 Java 中的整型、布尔型、浮点数字面量都不是对象）&lt;/li&gt;
&lt;li&gt;基于类的面向对象(class-based)：每个对象都是类的实例。类决定了对象所拥有的方法。（有些语言也不是基于类的，典型的如 JavaScript 是基于原型的）&lt;/li&gt;
&lt;li&gt;混入(mixin)：多重继承（C++）与接口（Java）之间的一个折中。Ruby 中每个类都只有一个父类，但是可以有任意数量的混入，不像接口，它们可以定义方法（而不只是要求某个方法要存在）。&lt;/li&gt;
&lt;li&gt;动态：Ruby 允许在任意对象上以任意参数调用任意方法，还可以在运行时改变类和对象的属性&lt;/li&gt;
&lt;li&gt;反射(reflection)：可以在运行时知道对象的类是什么，有哪些方法&lt;/li&gt;
&lt;li&gt;闭包（block and closure）：block 几乎就是闭包并且可以方便地用来使用库中的高阶函数，由于众多迭代函数的存在，Ruby 中也几乎不会显示使用循环。Ruby 中也有完整的闭包（proc）&lt;/li&gt;
&lt;li&gt;脚本语言（script language）：脚本语言没有一个精确的定义，它意味着能够快速地写出简短的程序，方便地操作文件和字符串，较少考虑性能&lt;/li&gt;
&lt;li&gt;流行于 Web 应用开发：Ruby on Rails 是一个非常流行的服务端框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Class-Based-OOP&quot;&gt;&lt;a href=&quot;#Class-Based-OOP&quot; class=&quot;headerlink&quot; title=&quot;Class-Based OOP&quot;&gt;&lt;/a&gt;Class-Based OOP&lt;/h2&gt;&lt;p&gt;面向对象有如下几条规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有值都是对象的引用&lt;/li&gt;
&lt;li&gt;给定一个对象，可以通过调用它的方法与之交流，也可以被称为发送消息&lt;/li&gt;
&lt;li&gt;每个对象都有其私有的状态，只有对象自身的方法才能访问和修改状态&lt;/li&gt;
&lt;li&gt;每个对象都是类的实例&lt;/li&gt;
&lt;li&gt;类决定了对象的行为，类包含了方法的定义，它决定了对象如何处理它收到的调用（消息）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在另一些面向对象语言比如 Java/C# 中，大部分的规则都被实现了，然而 Ruby 给出了一个更完整的实现。例如， 一些字面量在 Java/C# 中不是对象，违反了规则1；Java/C# 中有 public 的属性，违反了规则3&lt;/p&gt;
&lt;h2 id=&quot;Calling-Methods&quot;&gt;&lt;a href=&quot;#Calling-Methods&quot; class=&quot;headerlink&quot; title=&quot;Calling Methods&quot;&gt;&lt;/a&gt;Calling Methods&lt;/h2&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;e&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.m(e1, e2, ...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与其他语言类似，首先得到表达式 e0, e1, e2… 的结果 obj0, obj1, obj2, … ，然后以 obj1, obj2, … 调用 obj0 的方法 m。方法调用另一种普遍的说法是消息传递，即向 obj0 传递了消息 m，附带 obj1, obj2, … 为参数，这种说法“更面向对象”，因为我们不关心接受者 obj0 是怎样实现的，只关心它能够接受并处理消息&lt;/p&gt;
&lt;h2 id=&quot;Instance-Varibles&quot;&gt;&lt;a href=&quot;#Instance-Varibles&quot; class=&quot;headerlink&quot; title=&quot;Instance Varibles&quot;&gt;&lt;/a&gt;Instance Varibles&lt;/h2&gt;&lt;p&gt;一个对象有对应的定义了方法的类，也有它自己的实例变量，可以持有值。这在 Java/C#/C++ 中称为域（fields）（或者属性？），不同的是，在 Ruby 中没有专门的声明一个对象所拥有的实例变量，当需要添加一个实例变量的时候，只要相应地赋值就可以。对应的，Java/C#/C++ 中有静态方法与静态变量，Ruby 中也有类变量与类方法，即被所有该类的实例共享。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# instance varible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@foo &lt;span class=&quot;comment&quot;&gt;# getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@foo= newValue &lt;span class=&quot;comment&quot;&gt;# setter, will be created if not exist&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# class varible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Duck-Typing&quot;&gt;&lt;a href=&quot;#Duck-Typing&quot; class=&quot;headerlink&quot; title=&quot;Duck Typing&quot;&gt;&lt;/a&gt;Duck Typing&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;If it walks like a duck and quacks like a duck, then it’s a duck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;言外之意是，没有理由去考虑那究竟是不是一只鸭子。在 Ruby 中，只要对所有消息的反应符合预期（比如会叫、会走），消息接受者（调用方法的对象）的类（比如 Duck 类）就不重要。面向对象更关心的是，能够“做什么”，而不在于“是什么”。&lt;/p&gt;
&lt;p&gt;鸭子类型利于代码的重用，使得客户端可以使用“假”鸭子而仍然使用你的代码。但它的缺陷在于，我们只知道某个方法的实现，尤其是要传递什么消息给什么对象。比如，如果假定 i 是一个数，在没有被重写的情况下，我们知道 i + i 可以替换成 i &lt;em&gt; 2 或者 2 &lt;/em&gt; i，但是如果只假定 i 有一个名叫 + 的方法，它可以接受自身作为参数，那我们就无法做出上述替换，因为我们不知道 i 有没有 &lt;em&gt; 这个方法，也不知道 2 有没有 &lt;/em&gt; 这个方法，是不是能接受 i 作为参数。&lt;/p&gt;
&lt;h2 id=&quot;Override-and-Dynamic-Dispatch&quot;&gt;&lt;a href=&quot;#Override-and-Dynamic-Dispatch&quot; class=&quot;headerlink&quot; title=&quot;Override and Dynamic Dispatch&quot;&gt;&lt;/a&gt;Override and Dynamic Dispatch&lt;/h2&gt;&lt;h2 id=&quot;OOP-Versus-Functional&quot;&gt;&lt;a href=&quot;#OOP-Versus-Functional&quot; class=&quot;headerlink&quot; title=&quot;OOP Versus Functional&quot;&gt;&lt;/a&gt;OOP Versus Functional&lt;/h2&gt;&lt;h2 id=&quot;Multiple-Inheritance-Mixin-Interface&quot;&gt;&lt;a href=&quot;#Multiple-Inheritance-Mixin-Interface&quot; class=&quot;headerlink&quot; title=&quot;Multiple Inheritance, Mixin, Interface&quot;&gt;&lt;/a&gt;Multiple Inheritance, Mixin, Interface&lt;/h2&gt;&lt;p&gt;TO BE DONE…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数式 (Functional)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;面
    
    </summary>
    
    
      <category term="编程语言" scheme="http://ziqi.moe/blog/tags/pl/"/>
    
  </entry>
  
  <entry>
    <title>A Note of Programming Languages (2)</title>
    <link href="http://ziqi.moe/blog/A-Note-of-Programming-Languages-Racket/"/>
    <id>http://ziqi.moe/blog/A-Note-of-Programming-Languages-Racket/</id>
    <published>2017-01-11T16:00:00.000Z</published>
    <updated>2017-01-12T14:14:02.291Z</updated>
    
    <content type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数式 (Functional)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;面向对象 (Object-Oriented)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;静态 (Static)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ML&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;动态 (Dynamic)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Racket&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Racket-Part&quot;&gt;&lt;a href=&quot;#Racket-Part&quot; class=&quot;headerlink&quot; title=&quot;Racket Part&quot;&gt;&lt;/a&gt;Racket Part&lt;/h1&gt;&lt;p&gt;Racket 是一门由 Scheme 而来的动态类型、函数式的语言 （其实比起 Scheme，它有类和对象）&lt;/p&gt;
&lt;h2 id=&quot;Syntax&quot;&gt;&lt;a href=&quot;#Syntax&quot; class=&quot;headerlink&quot; title=&quot;Syntax&quot;&gt;&lt;/a&gt;Syntax&lt;/h2&gt;&lt;p&gt;Racket 在语法方面比较特别，有两个特点：括号和前缀表达。&lt;/p&gt;
&lt;p&gt;Racket 里的所有东西都可以分为两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原子类型 (atom)：&lt;ul&gt;
&lt;li&gt;字面量： #t, 11, “hi”, null, etc.&lt;/li&gt;
&lt;li&gt;变量名：x&lt;/li&gt;
&lt;li&gt;关键字： define, lambda, if, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个在括号中的序列&lt;ul&gt;
&lt;li&gt;每个序列中的第一个元素会对后面的元素产生作用&lt;/li&gt;
&lt;li&gt;如果第一个元素不是关键字且整个序列是表达式的一部分，那就把它作为函数来调用 （包括 +, -, *, / 也都是函数）&lt;/li&gt;
&lt;li&gt;整个序列表示了对应的抽象语法树且没有二义性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Delayed-Evaluation-And-Thunk&quot;&gt;&lt;a href=&quot;#Delayed-Evaluation-And-Thunk&quot; class=&quot;headerlink&quot; title=&quot;Delayed Evaluation And Thunk&quot;&gt;&lt;/a&gt;Delayed Evaluation And Thunk&lt;/h2&gt;&lt;p&gt;语言设计上的一个关键语义：子表达式什么时候被求值&lt;/p&gt;
&lt;p&gt;对于 Racket, ML 以及大部分语言来说，当调用函数时，传入的参数表达式在执行函数体前被求值。但如果这个参数是一个函数，那在被调用之前，函数体的代码是不会被执行的。&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;my-if-bad&lt;/span&gt; x y z) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; x y z))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;; 无论 x 真假，y 和 z 都会被求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;my-if&lt;/span&gt; x y z) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; x (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;z&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;; 当 y 和 z 是函数时，只会求值其中一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种用来延迟计算的函数称为 thunk&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Lazy-Evaluation-And-Memoization&quot;&gt;&lt;a href=&quot;#Lazy-Evaluation-And-Memoization&quot; class=&quot;headerlink&quot; title=&quot;Lazy Evaluation And Memoization&quot;&gt;&lt;/a&gt;Lazy Evaluation And Memoization&lt;/h2&gt;&lt;p&gt;假设有一个很耗时的计算，但是并不知道最终会不会用到这个结果。这时我们可以用 thunk （或者一些语言有内建的 call-by-name 机制，比如 Scala）来延迟这个计算。&lt;/p&gt;
&lt;p&gt;假设用到了这个结果，也并不知道是不是会多次使用。即使用了 thunk 来延迟这个计算，每一次需要用到结果还是需要做一次相同的计算。（这里的前提是无副作用）为了解决这个问题，我们需要记录这个计算是否执行过，以及它执行得到的结果。（和 ML 一样， Racket 也是允许 mutation 的）在一些语言中，比如 Haskell，有内建的这种机制，即参数要么不被求值，要么只被求值一次，称为 call by need 。（常见的语言都是 call by value）&lt;/p&gt;
&lt;h2 id=&quot;Stream&quot;&gt;&lt;a href=&quot;#Stream&quot; class=&quot;headerlink&quot; title=&quot;Stream&quot;&gt;&lt;/a&gt;Stream&lt;/h2&gt;&lt;p&gt;如何产生一个无穷的序列，无论在空间上还是时间上都无法做到显式产生，但是我们可以用递推的方式描述它，以及编写方法来取得我们需要的部分。这样的方法称为流，典型的流就是 linux 的管道。&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; ones (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; () (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cons&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ones))) &lt;span class=&quot;comment&quot;&gt;; 产生无限个 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;; 每次得到一个值和产生它后继的 thunk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Macros&quot;&gt;&lt;a href=&quot;#Macros&quot; class=&quot;headerlink&quot; title=&quot;Macros&quot;&gt;&lt;/a&gt;Macros&lt;/h2&gt;&lt;p&gt;宏允许语言的使用者自定义语法，即可以扩展语言。宏展开在程序最开始执行，即在类型检查、编译、运行之前。&lt;/p&gt;
&lt;p&gt;Racket VS C/C++：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tokenization： 不是简单的替换，而是会区分单词。比如定义 head 为 car 的宏，headt 不会被替换成 cart&lt;/li&gt;
&lt;li&gt;Parenthesization： C/C++ 里需要用很多括号来确保宏替换后的正确执行，Racket 没有这个问题，因为括号在 Racket 里意味着一个语法序列的边界。&lt;/li&gt;
&lt;li&gt;Scope： Racket 不会在变量定义处进行宏替换&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hygiene：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在宏里面定义局部变量不会影响外部的同名变量&lt;/p&gt;
 &lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define-syntax&lt;/span&gt;&lt;/span&gt; double4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;syntax-rules&lt;/span&gt;&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [(&lt;span class=&quot;name&quot;&gt;double4&lt;/span&gt; e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let*&lt;/span&gt;&lt;/span&gt; ([&lt;span class=&quot;name&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; e])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; x x zero))]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([&lt;span class=&quot;name&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;double4&lt;/span&gt; zero)) &lt;span class=&quot;comment&quot;&gt;; 结果为 34&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在宏里面定义的局部变量永远指向宏定义处的环境，而非宏调用时的环境&lt;/p&gt;
 &lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define-syntax&lt;/span&gt;&lt;/span&gt; double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;syntax-rules&lt;/span&gt;&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [(&lt;span class=&quot;name&quot;&gt;double&lt;/span&gt; e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; e])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; x x))]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; ([&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; *])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;; 结果为 34&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Eval&quot;&gt;&lt;a href=&quot;#Eval&quot; class=&quot;headerlink&quot; title=&quot;Eval&quot;&gt;&lt;/a&gt;Eval&lt;/h2&gt;&lt;p&gt;很多语言都提供了执行自身代码的函数，比如 JavaScript, Python 都有。但 Racket 的区别在于，它以列表的形式表示要执行的代码而非字符串。&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; my-code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;list&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&#39;+&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;; &#39;+ 是一个 Symbol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;eval&lt;/span&gt;&lt;/span&gt; my-code) &lt;span class=&quot;comment&quot;&gt;; 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Static-VS-Dynamic&quot;&gt;&lt;a href=&quot;#Static-VS-Dynamic&quot; class=&quot;headerlink&quot; title=&quot;Static VS Dynamic&quot;&gt;&lt;/a&gt;Static VS Dynamic&lt;/h1&gt;&lt;p&gt;一门语言称之为静态或是动态，指的是它在什么时候进行类型检查。&lt;/p&gt;
&lt;h2 id=&quot;ML-VS-Racket&quot;&gt;&lt;a href=&quot;#ML-VS-Racket&quot; class=&quot;headerlink&quot; title=&quot;ML VS Racket&quot;&gt;&lt;/a&gt;ML VS Racket&lt;/h2&gt;&lt;p&gt;可以有两种看法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ML 某种程度上是 Racket 的子集，Racket 支持的写法更多，因为一部分 Racket 中允许的表达式不会被 ML 的静态检查通过。比如 if 语句的两个分支返回不同的类型。&lt;/li&gt;
&lt;li&gt;Racket 里的变量其实不是“没有类型”，而是只有“一个类型”。 &lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;datatype&lt;/span&gt; theType = &lt;span class=&quot;comment&quot;&gt;(* 所有的变量类型都一样，所以没有必要标注或是检查 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; | &lt;span class=&quot;comment&quot;&gt;(* 变量所持有的值是有不同类型的，即运行时值是带有所谓标签的 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;Pair&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; theType * theType |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;Fun&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; theType -&amp;gt; theType |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Static-Checking&quot;&gt;&lt;a href=&quot;#Static-Checking&quot; class=&quot;headerlink&quot; title=&quot;Static Checking&quot;&gt;&lt;/a&gt;Static Checking&lt;/h2&gt;&lt;p&gt;静态检查处在语法分析之后，程序运行之前，所以称之为“编译时检查”（但这跟语言用编译器还是解释器没有关系）。静态检查如何作用是语言定义的一部分，有的语言做得多有的语言做得少，给定检查规则，也可以自己实现工具来做期望的检查。&lt;/p&gt;
&lt;p&gt;实现静态检查的方式主要是类型系统，但类型系统只是实现静态检查的方式，而不是静态检查的目的。静态检查的目的是防止错误，但这个错误的范围很有限，比如大多数静态检查都不会检查数组是否越界，静态检查也没法告诉你某个地方你应该用乘法但是你用了加法。它能防止的是，字符串不能与整型相除，某个类型不能做某些事情。&lt;/p&gt;
&lt;p&gt;相比于动态检查（即给值加上标签，运行时进行检查），静态检查其实拒绝了一部分并不会出错的程序。这里值得讨论的东西在于，首先，你如何定义错误。&lt;/p&gt;
&lt;p&gt;考虑一个简单的“错误”： 3 / 0，你可以在下面这些时间点阻止这个“错误”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keystroke-time： 在编辑这段代码的时候阻止，意味着你写下 3 / 0 就已经是一个错误&lt;/li&gt;
&lt;li&gt;Compile-time： 当静态检查器“看到”这段代码的时候阻止，意味着这段代码不应该出现&lt;/li&gt;
&lt;li&gt;Link-time： 当发现这段代码会被调用的时候阻止，意味着调用这段代码是一个错误&lt;/li&gt;
&lt;li&gt;Run-time： 当执行这段代码的时候阻止，即被 0 除这个运算是一种错误&lt;/li&gt;
&lt;li&gt;Even-later&lt;ul&gt;
&lt;li&gt;执行这段代码没有错，但如果用到了这个运算返回的结果（可以是一个表示未定义的标识，比如 undefined），才是一种错误（比如把 undefined 用作数组下标）&lt;/li&gt;
&lt;li&gt;甚至用返回的结果来做计算也没错，3 / 0 应该表示正无穷，同样的 tan(π/2) 也表示正无穷，你可以让它参与计算（事实上， Racket 里 (/ 3.0 0.0) 就返回 +inf.0）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二个值得讨论的就是如何定义正确，怎么判断类型检查是符合语言定义的。&lt;/p&gt;
&lt;h2 id=&quot;Soundness-And-Completeness&quot;&gt;&lt;a href=&quot;#Soundness-And-Completeness&quot; class=&quot;headerlink&quot; title=&quot;Soundness And Completeness&quot;&gt;&lt;/a&gt;Soundness And Completeness&lt;/h2&gt;&lt;p&gt;设 X 为我们希望类型检查阻止的一件事，定义一个类型系统是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可靠的：不接受存在某个输入，使得 X 会发生的程序&lt;/li&gt;
&lt;li&gt;完备的：不拒绝对任意输入都不会使得 X 发生的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现代语言的类型系统都是可靠的，但不是完备的。可靠意味着使用这门语言的人，可以依赖于 X 不会发生这个事实来编程。完备当然很好，但是实际上被类型系统误诊的情况很少，并且也很容易修改以通过类型检查。&lt;/p&gt;
&lt;p&gt;但是为什么现代语言都不是完备的？实际上，静态检查不能够同时满足下面三件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序会终止 (Always terminate)&lt;/li&gt;
&lt;li&gt;可靠 (Soundness)&lt;/li&gt;
&lt;li&gt;完备 (Completeness)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果一定要抛弃一个，抛弃完备性是一个较好的选择。&lt;/p&gt;
&lt;p&gt;（为什么不能同时满足？是因为不可判定性，我解释不了）&lt;/p&gt;
&lt;h2 id=&quot;Weak-Typing&quot;&gt;&lt;a href=&quot;#Weak-Typing&quot; class=&quot;headerlink&quot; title=&quot;Weak Typing&quot;&gt;&lt;/a&gt;Weak Typing&lt;/h2&gt;&lt;p&gt;假设对于某个 X 而言，类型系统是不可靠的，那么至少要在运行时阻止这个行为。但另一种选择是，不阻止这样的行为，这是程序员的错误，语言不是必须去做检查的。这种情况下，程序可能发生各种不可预料的行为，存在这种情况的语言称为弱类型的。典型的弱类型语言就是 C 和 C++，一个典型的 X 行为就是数组越界。强类型语言比如 Java 会在运行时抛出异常，但弱类型语言不会阻止这个行为，从而发生无法预料的事。&lt;/p&gt;
&lt;p&gt;为什么 C/C++ 会如此设计？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接近底层，效率优先。检查错误需要额外的时间和空间，程序员也不希望有隐藏的时间空间开销&lt;/li&gt;
&lt;li&gt;“strong types for weak minds”， 即认为人比计算机聪明，我这么写肯定是对的，不用你来告诉我错了，事实证明这种想法是错误的，计算机比人要可靠得多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Flexible&quot;&gt;&lt;a href=&quot;#Flexible&quot; class=&quot;headerlink&quot; title=&quot;Flexible&quot;&gt;&lt;/a&gt;Flexible&lt;/h2&gt;&lt;p&gt;除了检查错误的时间点不同，不同的语言对相同的行为也有不同的对待，也就是有严格和灵活之分。一些语言认为是错误的，可能另一些语言不这么认为，相反赋予了一些看上去是错误的行为正确的意义。（It’s not a bug, but a feature!）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组越界：一些语言没有下标越界一说，用了越界的下标会使那个数组变大。还有些语言有从尾部开始的负下标。&lt;/li&gt;
&lt;li&gt;函数传参：一些语言无所谓参数的个数，传的多了会忽略，传的少了会用默认值代入&lt;/li&gt;
&lt;li&gt;隐式转换：一些语言字符串可以和数相加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（我真的没有在黑 JavaScript）&lt;/p&gt;
&lt;p&gt;这些特性一方面可能是不明智的，容易隐藏潜在的错误，让程序难以正确调试，但另一方面不可否认的，这种灵活有时候会很有用。这跟语言是动态还是静态也没什么关系，可能容易认为这种灵活让语言更加“动态”，但这只是改变了语义，不再阻止某些行为而已。&lt;/p&gt;
&lt;h2 id=&quot;Static-or-Dynamic&quot;&gt;&lt;a href=&quot;#Static-or-Dynamic&quot; class=&quot;headerlink&quot; title=&quot;Static or Dynamic&quot;&gt;&lt;/a&gt;Static or Dynamic&lt;/h2&gt;&lt;p&gt;回到正题，究竟该选择静态语言还是动态语言，各有什么优点和缺点？（永远没有答案可以说，静态一定比动态好，或是反过来）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便？动态没有类型的约束表达自然更加自由，但是静态有了确定类型的前提也可以少写很多类似判断类型的代码&lt;/li&gt;
&lt;li&gt;静态语言是否阻止了一些有用的程序？事实上，这些因为类型系统被阻止的程序，因为动态语言因为给值加上标签所以可以在运行时检查，但静态语言依然可以用类似 ML 的 datatype 或是面向对象语言中的多态来显式模拟这种标签。&lt;/li&gt;
&lt;li&gt;“过早”地检查错误？软件工程中有一个真理，bug 发现越早越容易修复。静态检查能帮你发现一些低级错误，使得程序员能专注于业务逻辑。但是动态语言的支持者同样可以说，仍然有一些错误是静态检查无法检测，需要通过测试来发现的，既然最终都要测试，那有没有静态检查也不重要。&lt;/li&gt;
&lt;li&gt;性能好坏？动态语言有标签的开销，但可以做优化，而且静态语言也有需要标签的时候。&lt;/li&gt;
&lt;li&gt;代码复用？显然动态语言更容易复用代码，但也因此更容易出错。&lt;/li&gt;
&lt;li&gt;产品原型设计？动态语言不用设计类型，同时可以先设计一部分，而静态语言必须通过类型检查，但也一样可以通过通配符之类的 case 来表达剩余的未设计部分。&lt;/li&gt;
&lt;li&gt;维护代码？动态语言方便给函数添加新的参数来扩展，并且可以不让用户感知到这一变化。对于静态语言，只要改动了一个地方，类型检查工具会告诉你所有相关联的应该修改的地方，也很方便。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数式 (Functional)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;面向对象 (Object-Oriented)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;静态 (Static)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ML&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;动态 (Dynamic)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Racket&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Racket-Part&quot;&gt;&lt;a href=&quot;#Racket-Part&quot; class=&quot;headerlink&quot; title=&quot;Racket Part&quot;&gt;&lt;/a&gt;Racket Part&lt;/h1&gt;&lt;p&gt;Racket 是一门由 Scheme 而来的动态类型、函数式的语言 （其实比起 Scheme，它有类和对象）&lt;/p&gt;
&lt;h2 id=&quot;Syntax&quot;&gt;&lt;a href=&quot;#Syntax&quot; class=&quot;headerlink&quot; title=&quot;Syntax&quot;&gt;&lt;/a&gt;Syntax&lt;/h2&gt;&lt;p&gt;Racket 在语法方面比较特别，有两个特点：括号和前缀表达。&lt;/p&gt;
&lt;p&gt;Racket 里的所有东西都可以分为两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原子类型 (atom)：&lt;ul&gt;
&lt;li&gt;字面量： #t, 11, “hi”, null, etc.&lt;/li&gt;
&lt;li&gt;变量名：x&lt;/li&gt;
&lt;li&gt;关键字： define, lambda, if, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个在括号中的序列&lt;ul&gt;
&lt;li&gt;每个序列中的第一个元素会对后面的元素产生作用&lt;/li&gt;
&lt;li&gt;如果第一个元素不是关键字且整个序列是表达式的一部分，那就把它作为函数来调用 （包括 +, -, *, / 也都是函数）&lt;/li&gt;
&lt;li&gt;整个序列表示了对应的抽象语法树且没有二义性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Delayed-Evaluation-And-Thunk&quot;&gt;&lt;a href=&quot;#Delayed-Evaluation-And-Thunk&quot; class=&quot;headerlink&quot; title=&quot;Delayed Evaluation And Thunk&quot;&gt;&lt;/a&gt;Delayed Evaluation And Thunk&lt;/h2&gt;&lt;p&gt;语言设计上的一个关键语义：子表达式什么时候被求值&lt;/p&gt;
&lt;p&gt;对于 Racket, ML 以及大部分语言来说，当调用函数时，传入的参数表达式在执行函数体前被求值。但如果这个参数是一个函数，那在被调用之前，函数体的代码是不会被执行的。&lt;br&gt;&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;my-if-bad&lt;/span&gt; x y z) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; x y z))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;; 无论 x 真假，y 和 z 都会被求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;my-if&lt;/span&gt; x y z) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; x (&lt;span class=&quot;name&quot;&gt;y&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;z&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;; 当 y 和 z 是函数时，只会求值其中一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种用来延迟计算的函数称为 thunk&lt;br&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://ziqi.moe/blog/tags/pl/"/>
    
  </entry>
  
  <entry>
    <title>从 Vue1 升级到 Vue2 的一些思考</title>
    <link href="http://ziqi.moe/blog/Vue2-Versus-Vue1/"/>
    <id>http://ziqi.moe/blog/Vue2-Versus-Vue1/</id>
    <published>2017-01-09T16:00:00.000Z</published>
    <updated>2017-01-10T13:37:10.145Z</updated>
    
    <content type="html">&lt;p&gt;之前在公司花了大约一个星期的时间把负责开发的会员卡模块从 Vue1 升级到了 Vue2，中间经历了不少坑，其中大部分是因为原本的代码偏离 Vue2 的最佳实践比较多（主要是数据流是双向还是单向），另一部分是因为 Vue2 底层的变化（引入了 Virtual DOM）。&lt;/p&gt;
&lt;h1 id=&quot;升级的缘由及考量&quot;&gt;&lt;a href=&quot;#升级的缘由及考量&quot; class=&quot;headerlink&quot; title=&quot;升级的缘由及考量&quot;&gt;&lt;/a&gt;升级的缘由及考量&lt;/h1&gt;&lt;p&gt;升级的考量无非两个方面，是否满足现在和以后的需求，升级的好处和代价分别有多大。&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首屏服务端渲染的需求，由于存在两套技术栈，一套是 PHP 模板，一套是前后端分离的 Vue 和 Play for Scala，当从旧有页面切换到 Vue 编写的页面时，会有明显的空白加载时间&lt;/li&gt;
&lt;li&gt;组件校验的需求，当时还是官方推荐的 vue-validator 还不支持这一点，但在它 3.0 的计划中，并且只支持 Vue2。 这也是一个很大的考量因素，即 Vue 周边的一些东西最后可能都会根据 Vue2 来开发和迭代。&lt;/li&gt;
&lt;li&gt;一些已有的 bug，但在 Vue2 中修复了。比如 v-model 的 number 修饰下， input 为空时会变成 0（后面看到这个 bug 在 Vue1 中也修复了，但并不能排除一些小 bug 可能不会再考虑 Vue1）。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
好处&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;除了解决上述需求和问题之外，我暂时没有找到一个让我从 Vue1 升级到 Vue2 决定性的优势。&lt;/p&gt;
&lt;h2 id=&quot;代价&quot;&gt;&lt;a href=&quot;#代价&quot; class=&quot;headerlink&quot; title=&quot;代价&quot;&gt;&lt;/a&gt;代价&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;迁移所需要的时间，这个时间不真的开始改代码其实很难估计，当时我用 vue-migrate-tool 检测出大约几百处需要修改（这里不包括 Vuex），我预计的时间是两到三天，实际花了一个星期。而且在升级过程中，项目是无法完整运行的（为什么说完整？因为只要一个模块一个模块改，就能保证有一部分是可运行可测试的）。以及包括后续升级其他也用 Vue1 开发中或开发完的项目所需时间。&lt;/li&gt;
&lt;li&gt;项目迁移完成之后的风险，即使有良好的单元测试也无法保证和之前 Vue1 版本表现是真的一致了&lt;/li&gt;
&lt;li&gt;学习成本，这个比起 Angular 是好多了，大多数变化都在 API 改名字之类的语法层面，而且大多数变化是在做减法，在减去一些不常用的或是累赘的 API，但其实 Vue2 改动了一些底层的东西（主要是 Virtual DOM），导致语义风格上其实有一些变化了（我认为是开始偏向 React 了）&lt;/li&gt;
&lt;li&gt;服务端渲染方面，就不仅仅是前端的问题了，整个前后端的架构也要动，涉及到后端和运维方面的改变。要考虑是不是加一层 Node 作所谓后端的前端，可行性和整个项目进度是否允许等等。（最终这个项目没有用 Vue 的服务端渲染，而是用 Play 直出一部分公共的组件（侧边栏、顶部导航等），再加载 Vue 的 JS 文件去渲染剩下的部分）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结一下，如果没有找到一个促使你升级的决定性因素，升级要谨慎，可以考虑还在开发中的以及后续项目尽量遵循 Vue2 一些最佳实践，少用 Vue2 废弃的东西。&lt;/p&gt;
&lt;h1 id=&quot;Vue2-VS-Vue1&quot;&gt;&lt;a href=&quot;#Vue2-VS-Vue1&quot; class=&quot;headerlink&quot; title=&quot;Vue2 VS Vue1&quot;&gt;&lt;/a&gt;Vue2 VS Vue1&lt;/h1&gt;&lt;p&gt;回到正题上，Vue2 相比 Vue1 有了哪一些比较重要的变化？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单向还是双向？&lt;/p&gt;
&lt;p&gt; 知乎上有个问题问 Vue 所谓的渐进式框架是什么意思，答案大多都说渐进式是主张最少的意思。那我想在单向还是双向这个问题上，Vue 还是主张了。在 Vue1 中，子组件可以修改父组件传给它的 prop，而在 Vue2 中不行。而我在用 Vue1 开发的过程中，大量使用了双向数据流，把之前的 sync 改成自定义事件这部分工作占据了我迁移的大多数时间。&lt;/p&gt;
&lt;p&gt; 我在哪些地方用了 sync ？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通用基础组件&lt;/p&gt;
&lt;p&gt;  比如 Popup, Sidepage 这类组件都需要一个变量来控制是否显示。双向数据流下，这个变量可以由父组件置为打开，当需要关闭的时候由子组件置为关闭。单向数据流下，需要关闭时，由子组件触发自定义事件，父组件监听该事件并在捕获到事件后将变量置为关闭状态。（其实 Vue1 下还有一种做法，就是这个变量可以是子组件的本地数据，父组件触发子组件的事件来完成操作，但是在 Vue2 中事件流只能向上不能向下）&lt;/p&gt;
&lt;p&gt;  这个场景下，简单地比较一下两者的差异，双向简单（写起来觉得爽），单向略为复杂但是仍有好处。扩展一下这个简单场景，如果关闭不仅仅是关闭，而是在关闭的同时要做一些其他事情，那么双向情况下，控制权在子组件，你需要传一个回调函数给子组件，而单向情况下，控制权在父组件，只要在原本的事件回调中增加逻辑。所以其实最终要考虑的是，数据的控制权究竟归属于父组件还是子组件，还是说比较中立，无论谁来操作都没有影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多层嵌套组件&lt;/p&gt;
&lt;p&gt;  组件需要嵌套多层，有一个祖先组件的数据，在它的后代中层层传递，很多个组件都需要它，最终的数据修改发生在比较深的地方。这种情况其实不太需要多讨论，双向情况下，如 Vue 文档里说的，考虑数据的安全性，任意子组件都可能修改这份数据，容易出现未知的错误。而单向情况下，操作起来就比上面那种两层的情况更麻烦了，最终我把这个情况全部改成了用 Vuex 来做。（之前在 Vue1，我只有在非父子的横向关系共享数据上使用 Vuex）&lt;/p&gt;
&lt;p&gt;注： 文档提及 Vue2 中有一个例外，就是如果是引用类型的数据，就没法阻止子组件去改变父组件的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;渲染函数与 Virtual DOM&lt;/p&gt;
&lt;p&gt; 我觉得这是 Vue2 中最重要的改变，即在 watch 和 依赖收集之上，修改真实 DOM 之下，加了一个通过渲染函数计算新的 Virtual DOM 的过程。模板最终都会被编译成渲染函数，以及这个渲染函数是组件级别的，这意味着要重新审视模板了。&lt;/p&gt;
&lt;p&gt; 模板中可能出现的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通的数据绑定&lt;/li&gt;
&lt;li&gt;动态绑定的 DOM 属性&lt;/li&gt;
&lt;li&gt;props&lt;/li&gt;
&lt;li&gt;事件回调&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;&lt;p&gt;directive&lt;/p&gt;
&lt;p&gt;模板中上述任一部分都可能会出现副作用，而且这些副作用会随着渲染函数的计算一遍遍地重复。比如在 props 中使用了引用类型的字面量，会导致每次渲染都新建对象，涉及的问题有内存和性能开销以及可能出现引用类型之间比较引起的未知错误。再比如，在 filter 中做输出操作，会觉得明明没有修改 filter 作用的数据却仍然调用了 filter 。（因为渲染函数是组件级别的，组件的任意数据更改都会响应式地去调用渲染函数）如果不重新看待模板，不改变旧有的编码风格，就可能出现意想不到的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上两个重要变化，单向数据流（数据向下，事件向上）与渲染函数（Virtual DOM），使我觉得 Vue2 在语义风格层面在向 React 靠近。可能未来各个框架之间，差异会一直变小，框架之间会一直相互借鉴。这是一件好事，因为框架最终都是拿来解决问题的，而不是拿来划分领地的。但不禁又想，前端下一个类似 Virtual DOM 引领潮流的新功能或是设计会是什么？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前在公司花了大约一个星期的时间把负责开发的会员卡模块从 Vue1 升级到了 Vue2，中间经历了不少坑，其中大部分是因为原本的代码偏离 Vue2 的最佳实践比较多（主要是数据流是双向还是单向），另一部分是因为 Vue2 底层的变化（引入了 Virtual DOM）。&lt;/p&gt;
&lt;h1 id=&quot;升级的缘由及考量&quot;&gt;&lt;a href=&quot;#升级的缘由及考量&quot; class=&quot;headerlink&quot; title=&quot;升级的缘由及考量&quot;&gt;&lt;/a&gt;升级的缘由及考量&lt;/h1&gt;&lt;p&gt;升级的考量无非两个方面，是否满足现在和以后的需求，升级的好处和代价分别有多大。&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首屏服务端渲染的需求，由于存在两套技术栈，一套是 PHP 模板，一套是前后端分离的 Vue 和 Play for Scala，当从旧有页面切换到 Vue 编写的页面时，会有明显的空白加载时间&lt;/li&gt;
&lt;li&gt;组件校验的需求，当时还是官方推荐的 vue-validator 还不支持这一点，但在它 3.0 的计划中，并且只支持 Vue2。 这也是一个很大的考量因素，即 Vue 周边的一些东西最后可能都会根据 Vue2 来开发和迭代。&lt;/li&gt;
&lt;li&gt;一些已有的 bug，但在 Vue2 中修复了。比如 v-model 的 number 修饰下， input 为空时会变成 0（后面看到这个 bug 在 Vue1 中也修复了，但并不能排除一些小 bug 可能不会再考虑 Vue1）。
    
    </summary>
    
    
      <category term="前端开发" scheme="http://ziqi.moe/blog/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>A Note of Programming Languages (1)</title>
    <link href="http://ziqi.moe/blog/A-Note-Of-Programing-Languages-ML/"/>
    <id>http://ziqi.moe/blog/A-Note-Of-Programing-Languages-ML/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2017-01-12T02:35:15.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Brief-Intro&quot;&gt;&lt;a href=&quot;#Brief-Intro&quot; class=&quot;headerlink&quot; title=&quot;Brief Intro&quot;&gt;&lt;/a&gt;Brief Intro&lt;/h1&gt;&lt;h2 id=&quot;Four-kinds-of-languages&quot;&gt;&lt;a href=&quot;#Four-kinds-of-languages&quot; class=&quot;headerlink&quot; title=&quot;Four kinds of languages&quot;&gt;&lt;/a&gt;Four kinds of languages&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数式 (Functional)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;面向对象 (Object-Oriented)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;静态 (Static)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ML&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;动态 (Dynamic)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Racket&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Essential-pieces-of-programming-language&quot;&gt;&lt;a href=&quot;#Essential-pieces-of-programming-language&quot; class=&quot;headerlink&quot; title=&quot;Essential pieces of programming language&quot;&gt;&lt;/a&gt;Essential pieces of programming language&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法 (Syntax)&lt;/li&gt;
&lt;li&gt;语义 (Semantic)&lt;/li&gt;
&lt;li&gt;Idioms: Common approaches to using language features ot express computation&lt;/li&gt;
&lt;li&gt;Libraries: 现成可以用的库，以及如操作文件这种没法自己实现的功能&lt;/li&gt;
&lt;li&gt;Tools: Compiler, REPL, Debugger, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ML-Part&quot;&gt;&lt;a href=&quot;#ML-Part&quot; class=&quot;headerlink&quot; title=&quot;ML Part&quot;&gt;&lt;/a&gt;ML Part&lt;/h1&gt;&lt;h1 id=&quot;Static&quot;&gt;&lt;a href=&quot;#Static&quot; class=&quot;headerlink&quot; title=&quot;Static&quot;&gt;&lt;/a&gt;Static&lt;/h1&gt;&lt;p&gt;ML 是一门静态语言，静态是指它在运行前进行类型检查&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = e &lt;span class=&quot;comment&quot;&gt;(* 称之为一次数据绑定， e 为一个表达式 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而我们要看到的不仅仅是这样一句语法描述，还要了解背后的语义，即类型检查和求值。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* x 的类型为 int，值为 1 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 每做一次数据绑定，当前环境都会更新，这个环境即作用域，后面会详细讨论 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; y = x + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* y 的类型为 int, 值为 3 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = y + &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 类型检查失败， + 不能用于 string 与 int 之间 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = w &lt;span class=&quot;comment&quot;&gt;(* 类型检查失败，当前环境中找不到 w *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于静态与动态，之后将与 Racket 对比来看，这里只提一些 ML 的特性。&lt;/p&gt;
&lt;h2 id=&quot;Type-Inference&quot;&gt;&lt;a href=&quot;#Type-Inference&quot; class=&quot;headerlink&quot; title=&quot;Type Inference&quot;&gt;&lt;/a&gt;Type Inference&lt;/h2&gt;&lt;p&gt;ML 是一门静态语言，但却是一门大多数时候不显式指定类型的语言，这得益于它强大的类型推导能力。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* x 的类型为 int，是因为 + 运算符的返回类型为 int *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; return_self xs = xs &lt;span class=&quot;comment&quot;&gt;(* 不能精确地确定这个函数的类型，所以类型为 &#39;a -&amp;gt; &#39;a，&#39;a 为任意类型 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 再如 length 函数返回一个列表的长度，它的类型就为 &#39;a list -&amp;gt; int *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个类型推导的过程例子如下&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; f (x, y, z) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; (x, y, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (y, x, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. 令 x 的类型为 T1， y 为 T2， z 为 T3，返回类型为 T4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. if 语句的两个分支得到的类型必须一致，即 T4=T1*T2*T3=T2*T1*T3，得到约束 T1=T2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 最终函数类型为 &#39;a*&#39;a*&#39;b -&amp;gt; &#39;a*&#39;a*&#39;b，即 x 和 y 的类型必须一致，而 z 可以是任意类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Option&quot;&gt;&lt;a href=&quot;#Option&quot; class=&quot;headerlink&quot; title=&quot;Option&quot;&gt;&lt;/a&gt;Option&lt;/h2&gt;&lt;p&gt;Option 提供了一种处理边界情况的能力,&lt;br&gt;即运算得到的可能是某种你需要的结果 (SOME)，也可能没有结果 (NONE)。&lt;/p&gt;
&lt;p&gt;比如写一个找出一个 int list 中最大值的函数&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* Without Option *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; find_greatest (xs: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; null xs &lt;span class=&quot;comment&quot;&gt;(* 考虑空列表这种边界情况 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 这里如果返回 0 就是一种很不好的风格 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; greatest_number&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在一门静态语言中，函数返回值的类型是确定的，在没有 Option 的情况下只能返回一个特定的数&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* With Option *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; find_greatest (xs: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; null xs &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NONE&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 没有结果，即找不到最大值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SOME&lt;/span&gt; (greatest_number) &lt;span class=&quot;comment&quot;&gt;(* 有最大值，则包装成 Option 返回 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Immutable&quot;&gt;&lt;a href=&quot;#Immutable&quot; class=&quot;headerlink&quot; title=&quot;Immutable&quot;&gt;&lt;/a&gt;Immutable&lt;/h1&gt;&lt;p&gt;函数式语言最重要的特性之一就是数据默认是不可变的&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 一旦绑定了就无法再改变这个 x 的值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* ML 中没有赋值的概念，这个表达式比较是否相等 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 新的数据绑定，之前的 x 还在但是会被新的 x 遮蔽(shadow) *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个比较明显的好处是排除了引用（别名）的危害。&lt;br&gt;如果数据不会被修改，那一个“变量”是否是引用就并不重要。&lt;br&gt;甚至于数据结构的存储是可以共享的，以此节省空间的开销。&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; y = [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = x::y &lt;span class=&quot;comment&quot;&gt;(* z 为 x 和 y 两个列表拼接而成 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 如果 x 和 y 是引用， 那么更改 x 或 y 都会使得 z 的值发生变化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;但是如果数据是不可变的就没有这个问题，甚至在内存分配上 z 其实只要共享 x 和 y 的空间就可以了 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利于并行和并发。这个好处使得函数式语言（或者理念）焕发新生。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在数据不可变的基础上建立数据结构，所关注的不再是常见的增删改查，而是构造和解构，即如何构造新的数据结构和从数据结构中取得数据。&lt;/p&gt;
&lt;h2 id=&quot;Build-New-Types&quot;&gt;&lt;a href=&quot;#Build-New-Types&quot; class=&quot;headerlink&quot; title=&quot;Build New Types&quot;&gt;&lt;/a&gt;Build New Types&lt;/h2&gt;&lt;p&gt;一门语言中一般会提供一些基本类型，如 int, bool, float, etc.&lt;/p&gt;
&lt;p&gt;同时也会提供构造自定义类型的能力&lt;/p&gt;
&lt;p&gt;自定义类型可以分为下面三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each Of : 即数据类型同时包含多个类型的值，比如元组 (1, “string”) 类型是 (int * string)&lt;/p&gt;
&lt;p&gt;ML 中使用 &lt;em&gt;Records&lt;/em&gt; 来表示这样的类型&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; my_records = &amp;#123;bar: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, foo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, baz: (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;(* 元组是一种特殊的 Records *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One Of : 数据类型包含多个类型中的一个，比如 int option，可能包含一个 int 值，也可能没有&lt;/p&gt;
&lt;p&gt;ML 中使用 &lt;em&gt;Datatype&lt;/em&gt; 来表示这样的类型&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;datatype&lt;/span&gt; mytype = &lt;span class=&quot;type&quot;&gt;TwoInts&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | &lt;span class=&quot;type&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* | 是或的意思 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | &lt;span class=&quot;type&quot;&gt;Pizza&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* TwoInts, Str, Pizza 相当于给某种类型加上了标签，同时它们也是函数可以用来构造与解构 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; mydata = &lt;span class=&quot;type&quot;&gt;TwoInts&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;(* mydata 的类型为 mytype *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;datatype&lt;/span&gt; my_int_option = &lt;span class=&quot;type&quot;&gt;SOME&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* Option 是一种特殊的 Datatype *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      | &lt;span class=&quot;type&quot;&gt;NONE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Self Reference : 自指的类型，用于描述递归的数据类型，&lt;br&gt;比如 int list 可能是空的，也可能是一个 int 值和另一个 int list 的组合（递归地定义）&lt;br&gt;（事实上 int list 融合了以上三种）&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;datatype&lt;/span&gt; my_int_list = &lt;span class=&quot;type&quot;&gt;Empty&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    | &lt;span class=&quot;type&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * my_int_list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;[]&lt;/span&gt;]]]]] &lt;span class=&quot;comment&quot;&gt;(* 类似俄罗斯套娃 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Pattern-Match&quot;&gt;&lt;a href=&quot;#Pattern-Match&quot; class=&quot;headerlink&quot; title=&quot;Pattern Match&quot;&gt;&lt;/a&gt;Pattern Match&lt;/h2&gt;&lt;p&gt;模式匹配提供了强大优雅的从各种自定义数据类型中取数据的能力，即解构的能力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;case 表达式&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; getOrElse &lt;span class=&quot;keyword&quot;&gt;op&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;type&quot;&gt;NONE&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | &lt;span class=&quot;type&quot;&gt;SOME&lt;/span&gt; x =&amp;gt; x &lt;span class=&quot;comment&quot;&gt;(* 从 Option 中解构出包装的值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; find_greatest xs =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; xs &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head::tail =&amp;gt; &lt;span class=&quot;comment&quot;&gt;(* 从列表解构出表头 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head::(body::tail) =&amp;gt; &lt;span class=&quot;comment&quot;&gt;(* Nested Pattern，匹配至少有一个元素的列表 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 从上一节的 Datatype 中解构 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; mydata &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TwoInts&lt;/span&gt;(a, b) =&amp;gt; a + b &lt;span class=&quot;comment&quot;&gt;(* 解构出 a = 1, b = 2 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  | _ =&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* TwoInts 既是构造器也是提取器 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数参数解构&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; is_greater (x, y) = &lt;span class=&quot;comment&quot;&gt;(* 这里已经发生了模式匹配， ML 所有的函数都是单参数的， 这里实际的参数是 (x, y) 这个元组 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x &amp;gt; y &lt;span class=&quot;comment&quot;&gt;(* 在函数体内取得的是已经从元组中解构出的值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* ML 中另一种实现多参函数的方法是柯里化 (Currying) *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;let, val 解构&lt;/p&gt;
&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; sum_triple (triple: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; (x,y,z) = triple &lt;span class=&quot;comment&quot;&gt;(* 解构出元组中的值 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; x + y + z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Tail-Recursion&quot;&gt;&lt;a href=&quot;#Tail-Recursion&quot; class=&quot;headerlink&quot; title=&quot;Tail Recursion&quot;&gt;&lt;/a&gt;Tail Recursion&lt;/h2&gt;&lt;p&gt;大多数函数式语言中都没有过程式语言中常用的循环语句，而是通过递归的方式来实现。&lt;br&gt;（这是一种 idiom，是由不可变数据带来的，因为没法实现用来计数的迭代器)&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; sum1 xs =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; xs &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;literal&quot;&gt;[]&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  | head::tail =&amp;gt; head + sum1 tail &lt;span class=&quot;comment&quot;&gt;(* bad style cause stack overflow *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 需要维护一个 O(n) 的调用栈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sum1 [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + sum1 [2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 2 + sum1 [3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 2 + 3 + sum1 []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 2 + 3 + 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 2 + 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 + 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; sum2 xs =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; helper (xs, acc) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; xs &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;literal&quot;&gt;[]&lt;/span&gt; =&amp;gt; acc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | head::tail =&amp;gt; helper(tail, acc + head) &lt;span class=&quot;comment&quot;&gt;(* tail recursion*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; helper(xs, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 尾递归优化下，不需要维护整个调用栈，空间复杂度 O(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  helper([1,2,3], 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  helper([2,3], 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  helper([3], 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  helper([], 6)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Functions-As-Value&quot;&gt;&lt;a href=&quot;#Functions-As-Value&quot; class=&quot;headerlink&quot; title=&quot;Functions As Value&quot;&gt;&lt;/a&gt;Functions As Value&lt;/h1&gt;&lt;p&gt;函数式语言另一个最重要的特性就是函数可以作为值来传递，即函数是一级公民。（First-Class Function)&lt;/p&gt;
&lt;h2 id=&quot;Take-Function-As-Argument&quot;&gt;&lt;a href=&quot;#Take-Function-As-Argument&quot; class=&quot;headerlink&quot; title=&quot;Take Function As Argument&quot;&gt;&lt;/a&gt;Take Function As Argument&lt;/h2&gt;&lt;p&gt;以函数为参数的函数称为高阶函数，利用高阶函数可以更好地抽象与重用代码。（idiom）&lt;/p&gt;
&lt;p&gt;典型的高阶函数就是 map 。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fun map (f, xs) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  case xs of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [] =&amp;gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | x::xs&amp;apos; =&amp;gt; (f x)::map(f, xs&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map(fn x =&amp;gt; x * 2, [1,2,3]) (* 得到 [2,4,6] *)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Lexical-Scope-And-Closure&quot;&gt;&lt;a href=&quot;#Lexical-Scope-And-Closure&quot; class=&quot;headerlink&quot; title=&quot;Lexical Scope And Closure&quot;&gt;&lt;/a&gt;Lexical Scope And Closure&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;function&lt;/em&gt; (closure) = &lt;em&gt;code&lt;/em&gt; (for function body) + &lt;em&gt;environment&lt;/em&gt; (lexical scope)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即函数能访问到的变量不仅仅有参数和函数体内定义的变量，还有它的词法作用域中的变量。&lt;/p&gt;
&lt;p&gt;例子：回调、柯里化、函数组合等等&lt;/p&gt;
&lt;p&gt;（闭包这部分资料太多太多，不作具体展开了）&lt;/p&gt;
&lt;h1 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;Module&lt;/h1&gt;&lt;p&gt;ML 使用模块来管理命名空间，分离接口与实现，以及隐藏私有方法。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 接口定义 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;RATIONAL_A&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sig&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; rational&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; make_frac : &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; -&amp;gt; rational&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; add : rational * rational -&amp;gt; rational&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; toString : rational -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 实现 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Rational_1&lt;/span&gt; :&amp;gt; &lt;span class=&quot;type&quot;&gt;RATIONAL_A&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;datatype&lt;/span&gt; rational = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; make_frac (x, y) = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; add (r1, r2) = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; reduce r = ... &lt;span class=&quot;comment&quot;&gt;(* 模块私有方法 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; toString r = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 调用 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Rational_1&lt;/span&gt;.make_frac(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;(* Rational_1 即一个命名空间 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Equivalence&quot;&gt;&lt;a href=&quot;#Equivalence&quot; class=&quot;headerlink&quot; title=&quot;Equivalence&quot;&gt;&lt;/a&gt;Equivalence&lt;/h2&gt;&lt;p&gt;同一个接口可以有不同的实现，同样的一个函数也可以有各种不同的实现，这里隐含着等价的概念。&lt;/p&gt;
&lt;p&gt;当你考虑等价实现的时候，可能有以下情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;维护：在不改变其他代码行为的前提下简化、重新组织代码&lt;/li&gt;
&lt;li&gt;向后兼容：在不改变已有功能的前提下增加新的特性&lt;/li&gt;
&lt;li&gt;性能优化：给出时间或空间上更佳的实现&lt;/li&gt;
&lt;li&gt;抽象：使用这个接口或者函数的客户端会感觉到内部实现的变化吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同的等价定义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语言层面的等价：同样的输入，得到同样的输出（包括产生同样的副作用、抛出同样的异常、同样终止或不终止）&lt;/li&gt;
&lt;li&gt;渐进等价：即算法复杂度相同，只考虑输入足够大的情况下，不考虑常数级别&lt;/li&gt;
&lt;li&gt;系统级别的等价：常数级别的性能也要考虑&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Side-Effect-Free&quot;&gt;&lt;a href=&quot;#Side-Effect-Free&quot; class=&quot;headerlink&quot; title=&quot;Side-Effect-Free&quot;&gt;&lt;/a&gt;Side-Effect-Free&lt;/h2&gt;&lt;p&gt;要保证两个实现的副作用相同，最简单的方式就是消除副作用。没有副作用的函数称为纯函数，副作用包括改变数据(引用)、输入输出等。&lt;br&gt;（ML中是可以做改变引用的值这种事的，所以它不是一门纯函数式语言。一门典型的纯函数式语言就是Haskell）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Brief-Intro&quot;&gt;&lt;a href=&quot;#Brief-Intro&quot; class=&quot;headerlink&quot; title=&quot;Brief Intro&quot;&gt;&lt;/a&gt;Brief Intro&lt;/h1&gt;&lt;h2 id=&quot;Four-kinds-of-languages&quot;&gt;&lt;a href=&quot;#Four-kinds-of-languages&quot; class=&quot;headerlink&quot; title=&quot;Four kinds of languages&quot;&gt;&lt;/a&gt;Four kinds of languages&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;函数式 (Functional)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;面向对象 (Object-Oriented)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;静态 (Static)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ML&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;动态 (Dynamic)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Racket&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Essential-pieces-of-programming-language&quot;&gt;&lt;a href=&quot;#Essential-pieces-of-programming-language&quot; class=&quot;headerlink&quot; title=&quot;Essential pieces of programming language&quot;&gt;&lt;/a&gt;Essential pieces of programming language&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法 (Syntax)&lt;/li&gt;
&lt;li&gt;语义 (Semantic)&lt;/li&gt;
&lt;li&gt;Idioms: Common approaches to using language features ot express computation&lt;/li&gt;
&lt;li&gt;Libraries: 现成可以用的库，以及如操作文件这种没法自己实现的功能&lt;/li&gt;
&lt;li&gt;Tools: Compiler, REPL, Debugger, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ML-Part&quot;&gt;&lt;a href=&quot;#ML-Part&quot; class=&quot;headerlink&quot; title=&quot;ML Part&quot;&gt;&lt;/a&gt;ML Part&lt;/h1&gt;&lt;h1 id=&quot;Static&quot;&gt;&lt;a href=&quot;#Static&quot; class=&quot;headerlink&quot; title=&quot;Static&quot;&gt;&lt;/a&gt;Static&lt;/h1&gt;&lt;p&gt;ML 是一门静态语言，静态是指它在运行前进行类型检查&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = e &lt;span class=&quot;comment&quot;&gt;(* 称之为一次数据绑定， e 为一个表达式 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而我们要看到的不仅仅是这样一句语法描述，还要了解背后的语义，即类型检查和求值。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* x 的类型为 int，值为 1 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 每做一次数据绑定，当前环境都会更新，这个环境即作用域，后面会详细讨论 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; y = x + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* y 的类型为 int, 值为 3 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = y + &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* 类型检查失败， + 不能用于 string 与 int 之间 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; z = w &lt;span class=&quot;comment&quot;&gt;(* 类型检查失败，当前环境中找不到 w *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于静态与动态，之后将与 Racket 对比来看，这里只提一些 ML 的特性。&lt;/p&gt;
&lt;h2 id=&quot;Type-Inference&quot;&gt;&lt;a href=&quot;#Type-Inference&quot; class=&quot;headerlink&quot; title=&quot;Type Inference&quot;&gt;&lt;/a&gt;Type Inference&lt;/h2&gt;&lt;p&gt;ML 是一门静态语言，但却是一门大多数时候不显式指定类型的语言，这得益于它强大的类型推导能力。&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(* x 的类型为 int，是因为 + 运算符的返回类型为 int *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; return_self xs = xs &lt;span class=&quot;comment&quot;&gt;(* 不能精确地确定这个函数的类型，所以类型为 &#39;a -&amp;gt; &#39;a，&#39;a 为任意类型 *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* 再如 length 函数返回一个列表的长度，它的类型就为 &#39;a list -&amp;gt; int *)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个类型推导的过程例子如下&lt;br&gt;&lt;figure class=&quot;highlight ml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; f (x, y, z) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; (x, y, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (y, x, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. 令 x 的类型为 T1， y 为 T2， z 为 T3，返回类型为 T4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. if 语句的两个分支得到的类型必须一致，即 T4=T1*T2*T3=T2*T1*T3，得到约束 T1=T2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 最终函数类型为 &#39;a*&#39;a*&#39;b -&amp;gt; &#39;a*&#39;a*&#39;b，即 x 和 y 的类型必须一致，而 z 可以是任意类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://ziqi.moe/blog/tags/pl/"/>
    
  </entry>
  
  <entry>
    <title>网易前端暑期实习生笔试面经（2016春）</title>
    <link href="http://ziqi.moe/blog/2016-Spring-Netease-Front-End-Interview/"/>
    <id>http://ziqi.moe/blog/2016-Spring-Netease-Front-End-Interview/</id>
    <published>2016-04-14T16:00:00.000Z</published>
    <updated>2017-01-10T08:14:25.262Z</updated>
    
    <content type="html">&lt;h2 id=&quot;笔试&quot;&gt;&lt;a href=&quot;#笔试&quot; class=&quot;headerlink&quot; title=&quot;笔试&quot;&gt;&lt;/a&gt;笔试&lt;/h2&gt;&lt;p&gt;选择题忽略&lt;/p&gt;
&lt;p&gt;问答题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用原生JS实现一个接口，能够用Ajax上传文件并显示上传进度，上传完成后接收一个来自服务器的json数据&lt;/li&gt;
&lt;li&gt;实现一个三列布局&lt;/li&gt;
&lt;li&gt;如何防范CSRF（跨站请求伪造）&lt;/li&gt;
&lt;li&gt;请列举减少HTTP请求数和资源文件大小的方法&lt;br&gt;&lt;a href=&quot;https://csspod.com/frontend-performance-best-practices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;列举实现跨域请求的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;p&gt;一上来先是自我介绍，在这个过程中，面试官会看你的简历&lt;/p&gt;
&lt;p&gt;Q：CSS和JS熟悉哪个？&lt;/p&gt;
&lt;p&gt;A：JS&lt;/p&gt;
&lt;p&gt;Q：浏览器端的JS包含哪几个部分？&lt;/p&gt;
&lt;p&gt;A：ECMAScript+DOM&lt;/p&gt;
&lt;p&gt;Q：DOM包含哪些对象？&lt;/p&gt;
&lt;p&gt;A：Node对象，然后继承下来的有Document,Element,Text，还有想不起来了&lt;/p&gt;
&lt;p&gt;( 常用的： Node(Document, Element, CharacterData(Text, Comment, CDATASection), DocumentFragment), Window, Attr, NodeList, Event, etc. )&lt;/p&gt;
&lt;p&gt;Q：JS有哪些基本类型？&lt;/p&gt;
&lt;p&gt;A：Number, String, undefined, null, 还有引用类型的&lt;/p&gt;
&lt;p&gt;( 这里我少答了Boolean，然后我以为问的是数据类型。ES6 新增了 Symbol )&lt;/p&gt;
&lt;p&gt;Q：基本类型和引用类型有什么区别？&lt;/p&gt;
&lt;p&gt;A：赋值的时候基本类型按值，引用类型按引用，就是基本类型会复制一份，引用类型就是一个新的指针。函数传参的时候都是按值传递.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Q： &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;a : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj = &amp;#123;a : &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(obj); &lt;span class=&quot;comment&quot;&gt;//问obj怎么变？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A：外面的obj不变，因为里面等于让局部的obj指向了一个新的对象&lt;/p&gt;
&lt;p&gt;// 下面两题是因为我简历有写我会C++&lt;/p&gt;
&lt;p&gt;Q：C++ 的引用类型是怎么样的？&lt;/p&gt;
&lt;p&gt;A：C++ 里面的引用相当于一个变量的别名，对引用做操作也会影响该变量&lt;/p&gt;
&lt;p&gt;Q：JS 和 C++ 有什么区别？&lt;/p&gt;
&lt;p&gt;A：面向对象不一样，C++ 是类式继承，JS 是原型链式。C++ 在函数式方面没有JS来的强。JS 没有 C++ 的一些高级特性，比如模板、泛型。&lt;/p&gt;
&lt;p&gt;Q：实现一个左边定宽右边自适应的两列布局，要求使用浮动和flex两种方法&lt;/p&gt;
&lt;p&gt;A：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width: 320px; //这个是面试官给的，面试官画了图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* 下面这段我少写了，然后面试官就问你上面这样能够让右边自适应吗？囧 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  margin-left: 320px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* flex 憋了很久没写出来。。。 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.root &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width: 320px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  flex: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Q：position有哪些属性？各自有什么特点？&lt;/p&gt;
&lt;p&gt;A：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static：正常文档流&lt;/li&gt;
&lt;li&gt;relative：相对于正常文档流中的位置定位&lt;/li&gt;
&lt;li&gt;absolute：相对于第一个不是static的父元素定位&lt;/li&gt;
&lt;li&gt;fixed：相对于浏览器定位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q：画一下标准盒模型&lt;/p&gt;
&lt;p&gt;A：// 感觉这里已经质疑我CSS是不是一点不会了，囧&lt;/p&gt;
&lt;p&gt;Q：闭包是什么？有什么用？&lt;/p&gt;
&lt;p&gt;A：// 这里我讲得很不清楚，大致说了就是函数里面套函数，可以保存变量&lt;/p&gt;
&lt;p&gt;Q：ES5中，除了函数，什么能够产生作用域？&lt;/p&gt;
&lt;p&gt;A：对象？&lt;br&gt;// 然后被回问对象有作用域吗？然后我说对象里面this会变。。。完全把作用域和执行环境弄混了&lt;/p&gt;
&lt;p&gt;( with 和 catch 都能产生作用域 )&lt;/p&gt;
&lt;p&gt;Q：函数有哪几种调用方式？&lt;/p&gt;
&lt;p&gt;A：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接调用&lt;/li&gt;
&lt;li&gt;作为对象的方法调用&lt;/li&gt;
&lt;li&gt;apply, call&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  func : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.func();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问 &lt;strong&gt;a&lt;/strong&gt; 怎么变，匿名函数里的 &lt;strong&gt;this&lt;/strong&gt; 是什么？怎么改变里面的 &lt;strong&gt;this&lt;/strong&gt; ？匿名函数不能传参怎么改变 &lt;strong&gt;obj.a&lt;/strong&gt; 的值？&lt;/p&gt;
&lt;p&gt;A: obj.a 不变，匿名函数里的 this 指向全局对象(window)，相当于给 window 加了一个名为 a 的属性。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//或者apply&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Q：描述一下事件模型？IE的事件模型是怎样的？事件代理是什么？事件代理中怎么定位实际事件产生的目标？&lt;/p&gt;
&lt;p&gt;A：捕获-&amp;gt;处于目标-&amp;gt;冒泡，IE应该是只有冒泡没有捕获。&lt;br&gt;事件代理就是在父元素上绑定事件来处理，通过 event 对象的 target 来定位。&lt;/p&gt;
&lt;p&gt;Q：JS动画有哪些实现方法？&lt;/p&gt;
&lt;p&gt;A：不太清楚&lt;/p&gt;
&lt;p&gt;( setTimeout/setInterval, requestAnimactionFrame )&lt;/p&gt;
&lt;p&gt;Q：那你知道还有什么实现动画的方法？&lt;/p&gt;
&lt;p&gt;A：CSS3的animation，还有用canvas做的算吗？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/design-and-ui/animations/css-vs-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Versus JavaScript Animations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Q：你最近有用过什么框架或库？&lt;/p&gt;
&lt;p&gt;A：用React Native做安卓，还在学 // 然后面试官说那你现在还是主要在原生JS的层面咯&lt;/p&gt;
&lt;p&gt;Q：你主要有哪些学习渠道？&lt;/p&gt;
&lt;p&gt;A：MDN,Udacity,慕课网&lt;/p&gt;
&lt;p&gt;Q：node.js有用过吗？&lt;/p&gt;
&lt;p&gt;A：有，主要用一些工具，比如gulp&lt;/p&gt;
&lt;p&gt;Q：你有用过什么代码管理工具？&lt;/p&gt;
&lt;p&gt;A：// 然后面试官看到简历上有GitHub就不问了&lt;/p&gt;
&lt;p&gt;Q：你还有什么问题吗？&lt;/p&gt;
&lt;p&gt;A：// 这里我问了这个部门主要是面向技术人员还是普通用户开发，回答是都有，还回问了我一句你想做哪方面&lt;/p&gt;
&lt;p&gt;最后面试官说你先去休息一下，待会儿还有个二面 // 意思是一面居然过了。。。&lt;/p&gt;
&lt;h2 id=&quot;二面&quot;&gt;&lt;a href=&quot;#二面&quot; class=&quot;headerlink&quot; title=&quot;二面&quot;&gt;&lt;/a&gt;二面&lt;/h2&gt;&lt;p&gt;二面没让自我介绍，直接看到简历上有写项目经历就开问了&lt;/p&gt;
&lt;p&gt;Q：说说你做过的项目以及从项目中学到了什么&lt;/p&gt;
&lt;p&gt;A：// balabala… 感觉很紧张，说得不是很清楚&lt;/p&gt;
&lt;p&gt;Q：函数声明和函数表达式有什么区别？&lt;/p&gt;
&lt;p&gt;A：函数声明会将那个函数提升到最前面，成为全局函数。函数声明要指定函数名，而函数表达式不用，可以用作匿名函数。&lt;/p&gt;
&lt;p&gt;Q：作用域链是什么？&lt;/p&gt;
&lt;p&gt;A：// 说的不是很清楚&lt;/p&gt;
&lt;p&gt;Q：面向对象有哪几个特点？&lt;/p&gt;
&lt;p&gt;A：继承、多态。。。想不起来了&lt;/p&gt;
&lt;p&gt;( 封装、继承、多态、抽象 )&lt;/p&gt;
&lt;p&gt;Q：JS怎么实现继承？&lt;/p&gt;
&lt;p&gt;A：将父对象的一个实例赋值给子对象的原型&lt;/p&gt;
&lt;p&gt;Q：怎么判断属性来自对象自身还是原型链？&lt;/p&gt;
&lt;p&gt;A：hasOwnProperty&lt;/p&gt;
&lt;p&gt;Q：双向链表怎么找中点？&lt;/p&gt;
&lt;p&gt;A：头尾指针都往中间走，两个指针相等或交替的时候为中点&lt;/p&gt;
&lt;p&gt;Q：单向链表呢？&lt;/p&gt;
&lt;p&gt;A：先走到尾记下有几个元素，然后再走到一半的地方&lt;br&gt;//面完查了下可以用快慢指针，一个指针每次走一步，另外个走两步，快指针到尾部时慢指针在中点&lt;/p&gt;
&lt;p&gt;Q：上次笔试之后有没有学到什么？&lt;/p&gt;
&lt;p&gt;A：了解了下跨域安全和性能相关的问题&lt;/p&gt;
&lt;p&gt;Q：那你描述一下跨域安全问题吧&lt;/p&gt;
&lt;p&gt;A：//balabala…最后发现根本讲不清楚，我还说考完之后去翻了《HTTP权威指南》，囧&lt;/p&gt;
&lt;p&gt;( CSRF（跨站请求伪造）： 诱骗用户去访问曾经访问过的保有凭据的网站。 检查 Referer 头， 或者 URL 增加校验 token )&lt;/p&gt;
&lt;p&gt;Q：怎么实现跨域请求？&lt;/p&gt;
&lt;p&gt;A：JSONP，http自定义origin头部&lt;/p&gt;
&lt;p&gt;( JSONP, CORS, iframe(window.name or document.domain), postMessage )&lt;/p&gt;
&lt;p&gt;Q：只写origin就够了吗？&lt;/p&gt;
&lt;p&gt;A：不太清楚&lt;/p&gt;
&lt;p&gt;Q：解释下TCP三次握手&lt;/p&gt;
&lt;p&gt;A：客户端发一个SYN，服务器回一个ACK，客户端再回一个ACK&lt;/p&gt;
&lt;p&gt;Q：HTTP头中哪些是和缓存相关的？&lt;/p&gt;
&lt;p&gt;A：ETag，cache-control。。。想不起来了&lt;/p&gt;
&lt;p&gt;Q：cookie和session有什么区别？&lt;/p&gt;
&lt;p&gt;A：cookie在客户端，session在服务端&lt;/p&gt;
&lt;p&gt;Q：浏览器在发送cookie时会发送哪几个部分？&lt;/p&gt;
&lt;p&gt;A：不太清楚&lt;/p&gt;
&lt;p&gt;( value )&lt;/p&gt;
&lt;p&gt;Q：那你知道cookie有哪几个组成部分吗？&lt;/p&gt;
&lt;p&gt;A：不太清楚&lt;/p&gt;
&lt;p&gt;( name, value, domain, path, expires/max-age, size, http-only, secure, samesite )&lt;/p&gt;
&lt;p&gt;Q：你有用开发者工具看过cookie吗？&lt;/p&gt;
&lt;p&gt;A：有&lt;/p&gt;
&lt;p&gt;Q：那cookie有哪几个组成部分？&lt;/p&gt;
&lt;p&gt;A：// 已死，我的内心是崩溃的&lt;/p&gt;
&lt;p&gt;Q：我没有问题了，你还有什么问题吗？&lt;/p&gt;
&lt;p&gt;A：// 崩溃的我居然问了刚刚那个cookie的问题可以告诉我答案吗。。。估计被定位成伸手党了&lt;/p&gt;
&lt;p&gt;面完之后去前台问被告知二面挂了，然后愉快（误）地滚回了学校&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一面比较注重基础知识，这方面听到有的面试官建议多看几遍《JavaScript高级程序设计》的，现场也有看到有人随身带着这本书&lt;br&gt;(我算是粗略地读过三遍左右，也确实大多数上面问到的问题都能在书中找到答案)&lt;/li&gt;
&lt;li&gt;二面注重能力考查，无论是学习能力（问项目，问笔试收获），和后端的合作（问很多网络原理），还是编程能力（会问算法，听到有人说问二叉树翻转的）都有涉及。&lt;br&gt;面试官也明显更高端了，应该是Team Leader级别的&lt;/li&gt;
&lt;li&gt;表达能力很重要，有些概念知道却没法清楚地表达出来，影响会很大&lt;/li&gt;
&lt;li&gt;不要把话题引向自己不那么有自信的地方（比如上面的跨域问题）&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;笔试&quot;&gt;&lt;a href=&quot;#笔试&quot; class=&quot;headerlink&quot; title=&quot;笔试&quot;&gt;&lt;/a&gt;笔试&lt;/h2&gt;&lt;p&gt;选择题忽略&lt;/p&gt;
&lt;p&gt;问答题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用原生JS实现一个接口，能够用Ajax上传文件并显示上传进度，上传完成后接收一个来自服务器的json数据&lt;/li&gt;
&lt;li&gt;实现一个三列布局&lt;/li&gt;
&lt;li&gt;如何防范CSRF（跨站请求伪造）&lt;/li&gt;
&lt;li&gt;请列举减少HTTP请求数和资源文件大小的方法&lt;br&gt;&lt;a href=&quot;https://csspod.com/frontend-performance-best-practices/&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;列举实现跨域请求的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;p&gt;一上来先是自我介绍，在这个过程中，面试官会看你的简历&lt;/p&gt;
&lt;p&gt;Q：CSS和JS熟悉哪个？&lt;/p&gt;
&lt;p&gt;A：JS&lt;/p&gt;
&lt;p&gt;Q：浏览器端的JS包含哪几个部分？&lt;/p&gt;
&lt;p&gt;A：ECMAScript+DOM&lt;/p&gt;
&lt;p&gt;Q：DOM包含哪些对象？&lt;/p&gt;
&lt;p&gt;A：Node对象，然后继承下来的有Document,Element,Text，还有想不起来了&lt;/p&gt;
&lt;p&gt;( 常用的： Node(Document, Element, CharacterData(Text, Comment, CDATASection), DocumentFragment), Window, Attr, NodeList, Event, etc. )&lt;/p&gt;
&lt;p&gt;Q：JS有哪些基本类型？&lt;/p&gt;
&lt;p&gt;A：Number, String, undefined, null, 还有引用类型的&lt;/p&gt;
&lt;p&gt;( 这里我少答了Boolean，然后我以为问的是数据类型。ES6 新增了 Symbol )&lt;/p&gt;
&lt;p&gt;Q：基本类型和引用类型有什么区别？&lt;/p&gt;
&lt;p&gt;A：赋值的时候基本类型按值，引用类型按引用，就是基本类型会复制一份，引用类型就是一个新的指针。函数传参的时候都是按值传递.&lt;br&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://ziqi.moe/blog/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>Jade如何用同一模板渲染出不同文章的页面</title>
    <link href="http://ziqi.moe/blog/JS-Object-Clone/"/>
    <id>http://ziqi.moe/blog/JS-Object-Clone/</id>
    <published>2016-04-02T09:24:53.000Z</published>
    <updated>2016-04-11T06:35:43.868Z</updated>
    
    <content type="html">&lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What:&quot;&gt;&lt;/a&gt;What:&lt;/h2&gt;&lt;p&gt;在写我的&lt;a href=&quot;https://github.com/novakoki/blog-generator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog-generator&lt;/a&gt;的时候，遇到了传说中面试经常考的对象复制的问题。&lt;br&gt;在用Jade模板的时候，要用同一个模板渲染出不同的文章，就需要有不同的locals。&lt;br&gt;一开始的想法是，用Jade里面的include markdown，这样只要文件名做变量就可以了，然而事实上Jade并不支持动态include。&lt;br&gt;于是只能改用先用marked解析markdown文件为字符串然后填充进去，假设有如下内容&lt;/p&gt;
&lt;p&gt;post.jade&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;article !&amp;#123;article&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//- 这里是解析markdown后得到的字符串，会带有很多转义符号，所以用 !&amp;#123;&amp;#125;的变量表达&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;locals.json&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;articles&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title1&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;path1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;article&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;balabala...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;那么在JavaScript中就可以&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;template&#39;&lt;/span&gt;, ()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; locals = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./locals.json&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; locals.articles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    这里做markdown解析并改变locals中article的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./post.jade&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .pipe(jade(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        locals: locals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .pipe(rename(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;.html`&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//gulp.dest只能指定输出的目录而不能指定文件名，需要rename = require(&#39;gulp-rename&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后一切都是由异步引起的问题了，为了符合gulp的风格，我用stream来读取markdown文件的内容&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stream = fs.createReadStream(locals.articles[title]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stream.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, (chunk) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data += chunk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stream.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  locals.article = marked(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为显然这个过程是异步的，所以我用一个闭包来存每次迭代的title&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;template&#39;&lt;/span&gt;, ()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; locals = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./locals.json&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//这里我一度以为locals也会是在闭包环境里的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; locals.articles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((title, locals) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stream = fs.createReadStream(locals.articles[title]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stream.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, (chunk) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          data += chunk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stream.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          locals.article = marked(data); &lt;span class=&quot;comment&quot;&gt;//这里是会影响外部的locals的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./post.jade&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(jade(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            locals: locals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(rename(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;.html`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)(title, locals);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;事实上这样最终只会产生相同的页面，即最后迭代的那一次。&lt;br&gt;意识到了其中的问题所在之后，我继续做了些修改&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;template&#39;&lt;/span&gt;, ()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; title &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; locals.articles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((title) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stream = fs.createReadStream(locals.articles[title]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; locals = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./locals.json&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//喂，这样总可以每个闭包环境都有一份locals了吧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stream.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, (chunk) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          data += chunk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stream.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          locals.article = marked(data); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./post.jade&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(jade(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            locals: locals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(rename(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;.html`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)(title);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果是被第二次打脸了，于是我只好寻求复制多份原始的locals，再分别做设置。&lt;br&gt;这里我没有用比较常规的写一个递归函数或者用原型来做复制，而是选择直接操作JSON字符串。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;stream.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./post.jade&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(jade(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      locals: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;JSON.stringify(locals).slice(0,-1)&amp;#125;&lt;/span&gt;,&lt;span class=&quot;subst&quot;&gt;$&amp;#123;marked(data)&amp;#125;&lt;/span&gt;&amp;#125;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(rename(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;.html`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./posts&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就用同一个模板给每篇文章都生成了一个页面，相应的，主页中需要展示一个文章摘要列表也可以做类似的实现。&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why:&quot;&gt;&lt;/a&gt;Why:&lt;/h2&gt;&lt;p&gt;回到上面的过程中，为什么我说一切问题都是由异步引起的？更确切些，可以说是由异步和引用类型引起的。&lt;/p&gt;
&lt;p&gt;首先，无论是node自身的stream还是gulp的stream，在读取或是写入时都是异步执行的，用于迭代的变量最终被用到时循环早已结束，这样的情形在DOM批量绑定事件的时候也早已见怪不怪了。&lt;/p&gt;
&lt;p&gt;一个简单的闭包可以解决问题，这么做了之后第一次修改我意识到了问题在于传参的类型，字符串、数字都在闭包中保存了一份拷贝，而引用类型或者说对象并没有，或者说在闭包中只是存了一份该指向对象指针的拷贝而已。&lt;/p&gt;
&lt;p&gt;改完之后为什么还是不对呢？确实每个闭包都有了一个locals才对啊。问题在于gulp的stream也是异步的，即gulp用到locals的时候，匿名函数调用已经结束了，locals作为局部变量已经被销毁了。&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How:&quot;&gt;&lt;/a&gt;How:&lt;/h2&gt;&lt;p&gt;《JavaScript高级程序设计》 P69-71&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入剖析 JavaScript 的深复制&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What:&quot;&gt;&lt;/a&gt;What:&lt;/h2&gt;&lt;p&gt;在写我的&lt;a href=&quot;https://github.com/novakoki/blog-generator&quot;&gt;blog-generator&lt;/a&gt;的时候，遇到了传说中面试经常考的对象复制的问题。&lt;br&gt;在用Jade模板的时候，要用同一个模板渲染出不同的文章，就需要有不同的locals。&lt;br&gt;一开始的想法是，用Jade里面的include markdown，这样只要文件名做变量就可以了，然而事实上Jade并不支持动态include。&lt;br&gt;于是只能改用先用marked解析markdown文件为字符串然后填充进去，假设有如下内容&lt;/p&gt;
&lt;p&gt;post.jade&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;article !&amp;#123;article&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//- 这里是解析markdown后得到的字符串，会带有很多转义符号，所以用 !&amp;#123;&amp;#125;的变量表达&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;locals.json&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;articles&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;title1&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;path1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;article&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;balabala...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://ziqi.moe/blog/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>CSS中外边距层叠的问题</title>
    <link href="http://ziqi.moe/blog/Margin-Collapsing/"/>
    <id>http://ziqi.moe/blog/Margin-Collapsing/</id>
    <published>2016-03-31T06:31:15.000Z</published>
    <updated>2016-03-31T06:42:28.490Z</updated>
    
    <content type="html">&lt;h2 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what:&quot;&gt;&lt;/a&gt;what:&lt;/h2&gt;&lt;p&gt;Q:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; {
  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: fixed;
  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt;;
}

&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; {
  &lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问div距离窗口上边的距离是多少？&lt;/p&gt;
&lt;p&gt;A: 15px&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why:&quot;&gt;&lt;/a&gt;why:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在没有指定left，top等的情况下，它们的默认值为auto，意味着div的位置应该放在其静态位置，&lt;br&gt;即在其正常文档流中的位置。&lt;/li&gt;
&lt;li&gt;那么问题转变为，div的静态位置应该在哪？这里涉及到一个外边距层叠的问题，p元素和body有15px的margin，&lt;br&gt;在没有清除样式的情况下，浏览器默认body与html之间有不定大小的margin，这两个垂直距离上的margin会发生层叠，&lt;br&gt;即最终body与html之间有了15px的margin，所以div就和窗口上边有了15px的margin&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;how&quot;&gt;&lt;a href=&quot;#how&quot; class=&quot;headerlink&quot; title=&quot;how:&quot;&gt;&lt;/a&gt;how:&lt;/h2&gt;&lt;p&gt;BFC: &lt;a href=&quot;http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解BFC和Margin Collapse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/19823139&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何解决外边距叠加的问题？&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what:&quot;&gt;&lt;/a&gt;what:&lt;/h2&gt;&lt;p&gt;Q:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; {
  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: fixed;
  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt;;
}

&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; {
  &lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问div距离窗口上边的距离是多少？&lt;/p&gt;
&lt;p&gt;A: 15px&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端开发" scheme="http://ziqi.moe/blog/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>A Note of Computer Network</title>
    <link href="http://ziqi.moe/blog/A-Note-of-Computer-Network/"/>
    <id>http://ziqi.moe/blog/A-Note-of-Computer-Network/</id>
    <published>2015-08-20T14:25:17.000Z</published>
    <updated>2017-01-10T06:58:59.982Z</updated>
    
    <content type="html">&lt;h2 id=&quot;I-Introduction&quot;&gt;&lt;a href=&quot;#I-Introduction&quot; class=&quot;headerlink&quot; title=&quot;I. Introduction&quot;&gt;&lt;/a&gt;I. Introduction&lt;/h2&gt;&lt;h3 id=&quot;1-Computer-Network-and-Distributed-System&quot;&gt;&lt;a href=&quot;#1-Computer-Network-and-Distributed-System&quot; class=&quot;headerlink&quot; title=&quot;1. Computer Network and Distributed System&quot;&gt;&lt;/a&gt;1. Computer Network and Distributed System&lt;/h3&gt;&lt;p&gt; Example: World Wide Web, Hadoop&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Uses&quot;&gt;&lt;a href=&quot;#2-Uses&quot; class=&quot;headerlink&quot; title=&quot;2. Uses&quot;&gt;&lt;/a&gt;2. Uses&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Business Application&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Resource Sharing &lt;em&gt;(Client-Server Model)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Communication Medium&lt;/li&gt;
&lt;li&gt;Electric Commerce&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Home Application&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Connectivity &lt;em&gt;(Peer-to-Peer)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Person-to-Person communication&lt;ul&gt;
&lt;li&gt;Instant Messaging (Twitter)&lt;/li&gt;
&lt;li&gt;Social Network (Facebook)&lt;/li&gt;
&lt;li&gt;Wiki (Wikipedia)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Electric Commerce (B2C, B2B, G2C, C2C, P2P)&lt;/li&gt;
&lt;li&gt;Entertainment&lt;/li&gt;
&lt;li&gt;Ubiquitous Computing (普适计算) (RFID, IOT)&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Users&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Wireless Network&lt;/li&gt;
&lt;li&gt;Text Messaging (SMS)&lt;/li&gt;
&lt;li&gt;Mobile Commerce&lt;/li&gt;
&lt;li&gt;Sensor Network&lt;/li&gt;
&lt;li&gt;Wearable Computers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Social Issues&lt;/strong&gt; (网络引起的各种社会问题)&lt;ul&gt;
&lt;li&gt;言论 (Network Neutrality)&lt;/li&gt;
&lt;li&gt;知识产权 (DMCA)&lt;/li&gt;
&lt;li&gt;隐私 (政府监控，Cookie中的信息，Gmail中的邮件，位置信息，匿名言论)&lt;/li&gt;
&lt;li&gt;垃圾信息 (Spam)&lt;/li&gt;
&lt;li&gt;网络安全 &lt;/li&gt;
&lt;li&gt;法律 (Electric Gambling)&lt;hr&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-Hardware&quot;&gt;&lt;a href=&quot;#3-Hardware&quot; class=&quot;headerlink&quot; title=&quot;3. Hardware&quot;&gt;&lt;/a&gt;3. Hardware&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sorted by &lt;strong&gt;Type&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Broadcast&lt;/li&gt;
&lt;li&gt;Point-to-Point&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sorted by &lt;strong&gt;Scale&lt;/strong&gt;&lt;br&gt;|Sorted by Scale|&lt;br&gt;|:—:|&lt;br&gt;|Internetworks|&lt;br&gt;|Wide Area Network|&lt;br&gt;|Metropolitan Area Network (城域网)|&lt;br&gt;|Local Area Network|&lt;br&gt;|Personal Area Network|&lt;hr&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-Software&quot;&gt;&lt;a href=&quot;#4-Software&quot; class=&quot;headerlink&quot; title=&quot;4. Software&quot;&gt;&lt;/a&gt;4. Software&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Layer, Protocol, Interface, Service&lt;/strong&gt;&lt;br&gt;Most networks are organized as a stack of &lt;strong&gt;layers&lt;/strong&gt;.&lt;br&gt;A &lt;strong&gt;protocol&lt;/strong&gt; is an agreement between the communicating parties on how communication is to proceed.&lt;br&gt;The &lt;strong&gt;interface&lt;/strong&gt; defines which primitive operations and services the lower layer makes available to the upper one.&lt;br&gt;A &lt;strong&gt;service&lt;/strong&gt; is a set of primitives(operations) that a layer provides to the layer above it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design Issues&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Reliability&lt;ul&gt;
&lt;li&gt;Error Detection&lt;/li&gt;
&lt;li&gt;Error Correction&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Routing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evolution&lt;ul&gt;
&lt;li&gt;Addressing or Naming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internetworking&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource Allocation&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multiplexing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flow Control&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Congestion&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Quality of Service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Connection Oriented&lt;/strong&gt; VS &lt;strong&gt;Connectionless&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Realiable communication may not be availble in a given layer;&lt;br&gt;The delays inherent in providing a reliable service may be unacceptable.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connection Oriented &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Byte Stream&lt;/strong&gt; VS &lt;strong&gt;Message Stream&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Voice over IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connectionless&lt;ul&gt;
&lt;li&gt;Datagram&lt;/li&gt;
&lt;li&gt;Request-Reply&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Service Primitive&lt;hr&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-Reference-Model&quot;&gt;&lt;a href=&quot;#5-Reference-Model&quot; class=&quot;headerlink&quot; title=&quot;5. Reference Model&quot;&gt;&lt;/a&gt;5. Reference Model&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;OSI&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;TCP/IP&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Used in the book&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Application&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Application&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Presentation&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Session&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Transport&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Transport&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Transport&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Network&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Network&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Network&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Data Link&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Link&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Data Link&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Physical&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Physical&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;6-Network-Standardization&quot;&gt;&lt;a href=&quot;#6-Network-Standardization&quot; class=&quot;headerlink&quot; title=&quot;6. Network Standardization&quot;&gt;&lt;/a&gt;6. Network Standardization&lt;/h3&gt;&lt;hr&gt;

&lt;h2 id=&quot;II-The-Physical-Layer&quot;&gt;&lt;a href=&quot;#II-The-Physical-Layer&quot; class=&quot;headerlink&quot; title=&quot;II. The Physical Layer&quot;&gt;&lt;/a&gt;II. The Physical Layer&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;It defines the electrical, timing and other interfaces by which&lt;br&gt; &lt;strong&gt;bits&lt;/strong&gt; are sent as &lt;strong&gt;signals&lt;/strong&gt; over &lt;strong&gt;channels&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-The-Theoretical-Basis-for-Data-Communication&quot;&gt;&lt;a href=&quot;#1-The-Theoretical-Basis-for-Data-Communication&quot; class=&quot;headerlink&quot; title=&quot;1. The Theoretical Basis for Data Communication&quot;&gt;&lt;/a&gt;1. The Theoretical Basis for Data Communication&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fourier Analysis&lt;/li&gt;
&lt;li&gt;Bandwidth-Limited Signals&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bandwidth&lt;/strong&gt;&lt;br&gt;  The width of the frequency range transmitted without being strongly attenuated(衰减) is called the bandwidth.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Baseband&lt;/strong&gt;&lt;br&gt;  Signals that run from 0 up to the maximum frequency are called baseband signals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Passband&lt;/strong&gt;&lt;br&gt;  Signals that are shifted to occupy a higher range of frequencies, as is the case of all wireless transmissions, are called passband signals.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Maximum Data Rate of a Channel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nyquist’s theorem&lt;br&gt;$$maximum\ data\ rate=2B\log_2V\ bits/sec$$&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shannon’s theorem&lt;br&gt;$$maximum\ data\ rate=B\log_2(1+S/N)\ bits/sec$$&lt;/p&gt;
&lt;p&gt;$$10\log_{10}S/N=1\ dB$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-Digital-Modulation&quot;&gt;&lt;a href=&quot;#2-Digital-Modulation&quot; class=&quot;headerlink&quot; title=&quot;2. Digital Modulation&quot;&gt;&lt;/a&gt;2. Digital Modulation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Baseband&lt;ul&gt;
&lt;li&gt;NRZ&lt;/li&gt;
&lt;li&gt;NRZI&lt;/li&gt;
&lt;li&gt;Manchester&lt;/li&gt;
&lt;li&gt;Bipolar&lt;/li&gt;
&lt;li&gt;4B/5B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Passband&lt;ul&gt;
&lt;li&gt;ASK&lt;/li&gt;
&lt;li&gt;FSK&lt;/li&gt;
&lt;li&gt;PSK&lt;/li&gt;
&lt;li&gt;Constellation Diagram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-Multiplexing&quot;&gt;&lt;a href=&quot;#3-Multiplexing&quot; class=&quot;headerlink&quot; title=&quot;3. Multiplexing&quot;&gt;&lt;/a&gt;3. Multiplexing&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FDM&lt;/li&gt;
&lt;li&gt;TDM&lt;/li&gt;
&lt;li&gt;CDMA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-Switching&quot;&gt;&lt;a href=&quot;#4-Switching&quot; class=&quot;headerlink&quot; title=&quot;4. Switching&quot;&gt;&lt;/a&gt;4. Switching&lt;/h3&gt;&lt;h2 id=&quot;III-The-Data-Link-Layer&quot;&gt;&lt;a href=&quot;#III-The-Data-Link-Layer&quot; class=&quot;headerlink&quot; title=&quot;III. The Data Link Layer&quot;&gt;&lt;/a&gt;III. The Data Link Layer&lt;/h2&gt;&lt;h3 id=&quot;1-Framing&quot;&gt;&lt;a href=&quot;#1-Framing&quot; class=&quot;headerlink&quot; title=&quot;1. Framing&quot;&gt;&lt;/a&gt;1. Framing&lt;/h3&gt;&lt;h2 id=&quot;IV-The-Medium-Access-Control-Sublayer&quot;&gt;&lt;a href=&quot;#IV-The-Medium-Access-Control-Sublayer&quot; class=&quot;headerlink&quot; title=&quot;IV. The Medium Access Control Sublayer&quot;&gt;&lt;/a&gt;IV. The Medium Access Control Sublayer&lt;/h2&gt;&lt;h2 id=&quot;V-The-Network-Layer&quot;&gt;&lt;a href=&quot;#V-The-Network-Layer&quot; class=&quot;headerlink&quot; title=&quot;V. The Network Layer&quot;&gt;&lt;/a&gt;V. The Network Layer&lt;/h2&gt;&lt;h2 id=&quot;VI-The-Transport-Layer&quot;&gt;&lt;a href=&quot;#VI-The-Transport-Layer&quot; class=&quot;headerlink&quot; title=&quot;VI. The Transport Layer&quot;&gt;&lt;/a&gt;VI. The Transport Layer&lt;/h2&gt;&lt;h2 id=&quot;VII-The-Application-Layer&quot;&gt;&lt;a href=&quot;#VII-The-Application-Layer&quot; class=&quot;headerlink&quot; title=&quot;VII. The Application Layer&quot;&gt;&lt;/a&gt;VII. The Application Layer&lt;/h2&gt;&lt;h2 id=&quot;VIII-Network-Security&quot;&gt;&lt;a href=&quot;#VIII-Network-Security&quot; class=&quot;headerlink&quot; title=&quot;VIII. Network Security&quot;&gt;&lt;/a&gt;VIII. Network Security&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;I-Introduction&quot;&gt;&lt;a href=&quot;#I-Introduction&quot; class=&quot;headerlink&quot; title=&quot;I. Introduction&quot;&gt;&lt;/a&gt;I. Introduction&lt;/h2&gt;&lt;h3 id=&quot;1-Computer-Network-and-Distributed-System&quot;&gt;&lt;a href=&quot;#1-Computer-Network-and-Distributed-System&quot; class=&quot;headerlink&quot; title=&quot;1. Computer Network and Distributed System&quot;&gt;&lt;/a&gt;1. Computer Network and Distributed System&lt;/h3&gt;&lt;p&gt; Example: World Wide Web, Hadoop&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Uses&quot;&gt;&lt;a href=&quot;#2-Uses&quot; class=&quot;headerlink&quot; title=&quot;2. Uses&quot;&gt;&lt;/a&gt;2. Uses&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Business Application&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Resource Sharing &lt;em&gt;(Client-Server Model)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Communication Medium&lt;/li&gt;
&lt;li&gt;Electric Commerce&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Home Application&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Connectivity &lt;em&gt;(Peer-to-Peer)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Person-to-Person communication&lt;ul&gt;
&lt;li&gt;Instant Messaging (Twitter)&lt;/li&gt;
&lt;li&gt;Social Network (Facebook)&lt;/li&gt;
&lt;li&gt;Wiki (Wikipedia)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Electric Commerce (B2C, B2B, G2C, C2C, P2P)&lt;/li&gt;
&lt;li&gt;Entertainment&lt;/li&gt;
&lt;li&gt;Ubiquitous Computing (普适计算) (RFID, IOT)
    
    </summary>
    
    
      <category term="课堂笔记" scheme="http://ziqi.moe/blog/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>换壳</title>
    <link href="http://ziqi.moe/blog/Migration/"/>
    <id>http://ziqi.moe/blog/Migration/</id>
    <published>2015-08-14T08:24:33.000Z</published>
    <updated>2016-03-28T01:46:28.277Z</updated>
    
    <content type="html">&lt;p&gt;以前的博客托管在&lt;a href=&quot;http://www.openshift.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;openshift&lt;/a&gt;上，免费能访问但是延时有点高，没有root权限，用的是&lt;a href=&quot;http://wordpress.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wordpress&lt;/a&gt;，也不常去动它，有时也会感觉插件纷繁复杂，显得有些笨重。上个月买了&lt;a href=&quot;https://www.digitalocean.com/?refcode=b0c59420cd4c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DigitalOcean&lt;/a&gt;的VPS，服务器的自由度大增，因为还有一些笔记类的文章写在&lt;a href=&quot;http://zybuluo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cmd Markdown&lt;/a&gt;里了，于是就准备换成比较轻型且支持markdown较好的博客，最终选了基于&lt;a href=&quot;http://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node.js&lt;/a&gt;的&lt;a href=&quot;http://www.ghostchina.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ghost&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;一开始买VPS主要是因为之前在用的某些服务要退出江湖了，然后看了&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NTEzMTUwNA==&amp;amp;mid=210457700&amp;amp;idx=1&amp;amp;sn=322d1e4c13d3f33ade848e3889c410bf&amp;amp;scene=5#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;余弦大大的文章&lt;/a&gt;，自己架了梯子，经过了一些优化之后，访问速度也很不错，能够油管720p无压力。这中间还深切地感受到计网没有学好，传输层那一章没有好好听，结果网络优化有很多都是TCP拥塞控制相关的内容，本来可以first principle的，最后还是沦为analogy了。&lt;/p&gt;
&lt;p&gt;回到博客，大二以来就在技术的路上原地踏步了，数据结构、计组和计网确实很重要，但是不能够也不足以占据全部的时间，这一年除了写了一些数据结构代码和计组的HDL代码之外几乎没再写过程序，这个现象让人警醒。暑假之后在前端上算是走出了一步，Udacity上的课程值得后续做一些笔记，包括baidu-ife的项目也需要总结（虽然是要烂尾的节奏了）。之后看犀牛书和js高程也是很有启发的，在这之前，每次遇到问题都选择去看看别人的代码，复制粘贴一段之类的，或是自己埋头去想如何解决，潜下心来深入地阅读才猛觉杨绛先生所说的想的太多读的太少是真理。大概前端这个领域，每个人都希望做得很炫，我也希望能够make something awesome，但如今我还是会想起初学编程的时候看到的侯捷老师那句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序设计领域里，每一个人都想飞。 但是，还没学会走之前，连跑都别想！  ——侯捷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一年我看到很多人能跑了，我还会继续往前走，想着有哪一天我也该起跑了吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以前的博客托管在&lt;a href=&quot;http://www.openshift.com&quot;&gt;openshift&lt;/a&gt;上，免费能访问但是延时有点高，没有root权限，用的是&lt;a href=&quot;http://wordpress.org&quot;&gt;wordpress&lt;/a&gt;，也不常去动它，有时也会感觉插件纷繁复杂，显得有些笨重。上个月买了&lt;a href=&quot;https://www.digitalocean.com/?refcode=b0c59420cd4c&quot;&gt;DigitalOcean&lt;/a&gt;的VPS，服务器的自由度大增，因为还有一些笔记类的文章写在&lt;a href=&quot;http://zybuluo.com&quot;&gt;Cmd Markdown&lt;/a&gt;里了，于是就准备换成比较轻型且支持markdown较好的博客，最终选了基于&lt;a href=&quot;http://nodejs.org&quot;&gt;node.js&lt;/a&gt;的&lt;a href=&quot;http://www.ghostchina.com/&quot;&gt;ghost&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ziqi.moe/blog/tags/eassy/"/>
    
  </entry>
  
  <entry>
    <title>分治法</title>
    <link href="http://ziqi.moe/blog/DIVIDE-AND-CONQUER/"/>
    <id>http://ziqi.moe/blog/DIVIDE-AND-CONQUER/</id>
    <published>2015-02-12T16:00:00.000Z</published>
    <updated>2016-12-11T13:45:34.149Z</updated>
    
    <content type="html">&lt;h4 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h4&gt;&lt;h4 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;分割成很多个同类型的子问题(&lt;strong&gt;Divide&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;递归地解决这些子问题(&lt;strong&gt;Conquer&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;合并子问题的答案(&lt;strong&gt;Combine&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;主序定理-The-Master-Method&quot;&gt;&lt;a href=&quot;#主序定理-The-Master-Method&quot; class=&quot;headerlink&quot; title=&quot;主序定理(The Master Method)&quot;&gt;&lt;/a&gt;主序定理(The Master Method)&lt;/h1&gt;&lt;p&gt;对于递推式：&lt;br&gt;$$T(n)=aT(n/b)+O(n^d)$$&lt;br&gt;有如下结论：&lt;/p&gt;
&lt;p&gt;$$T(n)=\begin{cases}&lt;br&gt;&amp;amp;O(n^d)&amp;amp;\text{if}&amp;amp;d\gt\log_ba\[2ex]&lt;br&gt;&amp;amp;O(n^d\log n)&amp;amp;\text{if}&amp;amp;d=\log_ba\[2ex]&lt;br&gt;&amp;amp;O(n^{\log_ba})&amp;amp;\text{if}&amp;amp;d\lt\log_ba&lt;br&gt;\end{cases}$$ &lt;/p&gt;
&lt;h1 id=&quot;经典算法&quot;&gt;&lt;a href=&quot;#经典算法&quot; class=&quot;headerlink&quot; title=&quot;经典算法&quot;&gt;&lt;/a&gt;经典算法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;整数乘法(Karatsuba Multiplication)&lt;/li&gt;
&lt;li&gt;归并排序(Mergesort)&lt;/li&gt;
&lt;li&gt;逆序数(Counting Inversions)&lt;/li&gt;
&lt;li&gt;最近点对(Closest Pair)&lt;/li&gt;
&lt;li&gt;矩阵乘法(Strassen’s Subcubic Matrix Multiplication)&lt;/li&gt;
&lt;li&gt;快速排序(Quicksort)&lt;/li&gt;
&lt;li&gt;选择问题(Selection)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h4&gt;&lt;h4 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;分割成很多个同类型的子问题(&lt;strong&gt;Divide&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;递归地解决这些子问题(&lt;strong&gt;Conquer&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;合并子问题的答案(&lt;strong&gt;Combine&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://ziqi.moe/blog/tags/algo/"/>
    
  </entry>
  
  <entry>
    <title>在快速排序中选择好的枢纽点</title>
    <link href="http://ziqi.moe/blog/Choose-Good-Pivot-In-Quciksort/"/>
    <id>http://ziqi.moe/blog/Choose-Good-Pivot-In-Quciksort/</id>
    <published>2015-02-12T16:00:00.000Z</published>
    <updated>2016-12-11T13:45:04.065Z</updated>
    
    <content type="html">&lt;p&gt;快速排序是一个典型的分治(DIVIDE-AND-CONQUER)算法.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QuickSort(array A,length n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pivot = ChoosePivot(A,n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Partition A around pivot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Recursively sort &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;st part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Recursively sort &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;nd part&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而决定这个算法效率的关键就在于枢纽点(pivot)的选取，因为这直接影响到分割(partition)的好坏。最坏情况下，即每次选取的枢纽点都为最大或最小的数，则时间复杂度为 $\theta(n^2)$ .而如果能够奇迹般地每次都选择了中位数，时间复杂度就为 $\theta(n \log n)$ .以上都为理想情况的分析，而对于排序来说，效率的衡量在于比较次数。以下对各种枢纽点的选取方法做一个比较次数的测量，数据为10000个0~9999之间的整数。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选取首尾元素&lt;br&gt;首：162085次比较&lt;br&gt;尾：164123&lt;/p&gt;
&lt;p&gt;这种方法的效率取决于输入数据的预排序程度，如果是已经有序的状态，则效率很低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三数中值分割法，即选择下标为第一个、最后一个、中间的三个数的中位数作枢纽点&lt;br&gt;138382&lt;/p&gt;
&lt;p&gt;效率很高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;随机选取枢纽点&lt;br&gt;测试了五次：&lt;br&gt;148958，149598，163443，161712，161399&lt;/p&gt;
&lt;p&gt;随机选取枢纽点无疑是安全的，因为不可能每次都选中最坏的情形。但是另一方面，随机数的生成也耗费了时间，对实际排序的时间造成了影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;所用的数据：&lt;br&gt;&lt;a href=&quot;http://spark-public.s3.amazonaws.com/algo1/programming_prob/QuickSort.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spark-public.s3.amazonaws.com/algo1/programming_prob/QuickSort.txt&lt;/a&gt;&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/2397&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/2397&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考代码：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* A,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lo,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hi)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	三数中值分割法 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	int a = A[lo];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	int b = A[hi];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	int c = A[(lo+hi)/2];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	if(( (a&amp;gt;=b) &amp;amp;&amp;amp; (a&amp;lt;=c) ) || ( (a&amp;gt;=c) &amp;amp;&amp;amp; (a&amp;lt;=b) ))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		return lo;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	if(((b&amp;gt;=a)&amp;amp;&amp;amp;(b&amp;lt;=c))||((b&amp;gt;=c)&amp;amp;&amp;amp;(b&amp;lt;=a)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		return hi;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	if(((c&amp;gt;=b)&amp;amp;&amp;amp;(c&amp;lt;=a))||((c&amp;gt;=a)&amp;amp;&amp;amp;(c&amp;lt;=b)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		return (lo+hi)/2;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//首尾 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//return lo;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//return hi;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//随机 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//srand((int)time(0));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//return lo + rand()%(hi-lo);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; a,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* A,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l == r+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	for(int i = 0;i &amp;lt; 10;i++)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//		cout&amp;lt;&amp;lt;A[i]&amp;lt;&amp;lt;&quot; &quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	cout&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p = pivot(A,l,r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//cout&amp;lt;&amp;lt;A[p]&amp;lt;&amp;lt;&quot; &quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	swap(A[l],A[p]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = l + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = l + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j &amp;lt;= r;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(A[j] &amp;lt; A[l])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			swap(A[j],A[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sum++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	swap(A[l],A[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	QuickSort(A,l,i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	QuickSort(A,i,r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;快速排序是一个典型的分治(DIVIDE-AND-CONQUER)算法.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QuickSort(array A,length n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pivot = ChoosePivot(A,n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Partition A around pivot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Recursively sort &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;st part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Recursively sort &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;nd part&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而决定这个算法效率的关键就在于枢纽点(pivot)的选取，因为这直接影响到分割(partition)的好坏。最坏情况下，即每次选取的枢纽点都为最大或最小的数，则时间复杂度为 $\theta(n^2)$ .而如果能够奇迹般地每次都选择了中位数，时间复杂度就为 $\theta(n \log n)$ .以上都为理想情况的分析，而对于排序来说，效率的衡量在于比较次数。以下对各种枢纽点的选取方法做一个比较次数的测量，数据为10000个0~9999之间的整数。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://ziqi.moe/blog/tags/algo/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning : Linear Regression</title>
    <link href="http://ziqi.moe/blog/Machine-Learning-Linear-Regression/"/>
    <id>http://ziqi.moe/blog/Machine-Learning-Linear-Regression/</id>
    <published>2015-02-07T13:10:00.000Z</published>
    <updated>2016-12-11T13:45:57.129Z</updated>
    
    <content type="html">&lt;p&gt;线性回归即用线性函数对因变量和一个或多个自变量之间的关系进行建模。这个函数是多个称为回归系数的参数的线性组合。&lt;/p&gt;
&lt;p&gt;给定数据集（n个变量，m组数据） &lt;/p&gt;
&lt;p&gt;用矩阵来表示数据集&lt;br&gt;$$&lt;br&gt;X=&lt;br&gt;\begin{pmatrix}&lt;br&gt;1&amp;amp;x_{11}&amp;amp;x_{21}&amp;amp;\cdots&amp;amp;x_{n1}\\&lt;br&gt;\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\\&lt;br&gt;1&amp;amp;x_{1m}&amp;amp;x_{2m}&amp;amp;\cdots&amp;amp;x_{nm}&lt;br&gt;\end{pmatrix}&lt;br&gt;$$&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;$$&lt;br&gt;Y=&lt;br&gt;\begin{pmatrix}&lt;br&gt;y_1\\&lt;br&gt;\vdots\\&lt;br&gt;y_m&lt;br&gt;\end{pmatrix}&lt;br&gt;$$&lt;br&gt;用最小二乘法，即要寻找一个函数&lt;br&gt;$$h_\theta(x)=x\theta$$&lt;br&gt;其中$\theta$ 为参数，$\theta=\begin{pmatrix}&lt;br&gt;\theta_0\\&lt;br&gt;\theta_1\\&lt;br&gt;\vdots\\&lt;br&gt;\theta_m&lt;br&gt;\end{pmatrix}$ ,&lt;br&gt;$h_{\theta}(X)$ 叫做Hypothesis&lt;/p&gt;
&lt;p&gt;使得$$J(\theta)=\frac1{2m}\sum_{i=1}^{m}{(h_{\theta}(x^{(i)})-y_i)^2}$$最小，此处$$x^{(i)}=&lt;br&gt;\begin{pmatrix}&lt;br&gt;x_{i1}&amp;amp;x_{i2}&amp;amp;\cdots&amp;amp;x_{in}&lt;br&gt;\end{pmatrix}&lt;br&gt;$$，$J(\theta)$叫做Cost Function&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;###非迭代法(Normal Equation)&lt;br&gt;$$\theta=(X^T X)^{-1}X^TY$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以不用考虑数据的scale，即每个变量取值范围之间的差距 &lt;/li&gt;
&lt;li&gt;大量矩阵运算，尤其是求逆运算复杂度较高，不适于大量数据，$O(n^3)$&lt;/li&gt;
&lt;li&gt;$X^TX$可能出现奇异的情况，原因：&lt;ol&gt;
&lt;li&gt;自变量太多而数据不够，即 $m\lt n$，可以考虑删除一些&lt;/li&gt;
&lt;li&gt;自变量冗余，即有两个或以上变量线性相关&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###迭代法(梯度下降，Gradient Descent)&lt;br&gt;$$Repeat:{\&lt;br&gt;\theta_j:=\theta_j-\alpha\frac1m\sum_{i=1}^m{(h_{\theta}(x^{(i)})-y_i)^2}x_j^{(i)}\&lt;br&gt;}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要判断算法是否已经正确执行，即如何确定稳定。可以观察$J(\theta)$图像，也可以给定一个值，当迭代后的减少量小于该值就认为迭代结束&lt;/li&gt;
&lt;li&gt;要考虑数据的scale，否则出现梯度下降困难。可以把每个自变量的取值范围都统一到一定的区间内，如：&lt;br&gt;$$x_i:=\frac{x_i-\mu_i}{S_i}$$&lt;br&gt;使得$-1\lt x_i\lt1$，其中$\mu_i$为均值，$S_i$为取值范围&lt;/li&gt;
&lt;li&gt;要考虑速率 $\alpha$，太大容易出现迭代后增加而非减少，太小则运行时间延长。可以尝试从小的值逐渐增大并观察$J(\theta)$图像变化&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;线性回归即用线性函数对因变量和一个或多个自变量之间的关系进行建模。这个函数是多个称为回归系数的参数的线性组合。&lt;/p&gt;
&lt;p&gt;给定数据集（n个变量，m组数据） &lt;/p&gt;
&lt;p&gt;用矩阵来表示数据集&lt;br&gt;$$&lt;br&gt;X=&lt;br&gt;\begin{pmatrix}&lt;br&gt;1&amp;amp;x_{11}&amp;amp;x_{21}&amp;amp;\cdots&amp;amp;x_{n1}\\&lt;br&gt;\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\\&lt;br&gt;1&amp;amp;x_{1m}&amp;amp;x_{2m}&amp;amp;\cdots&amp;amp;x_{nm}&lt;br&gt;\end{pmatrix}&lt;br&gt;$$&lt;br&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://ziqi.moe/blog/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning : Introduction</title>
    <link href="http://ziqi.moe/blog/Machine-Learning-Introduction/"/>
    <id>http://ziqi.moe/blog/Machine-Learning-Introduction/</id>
    <published>2015-02-06T16:00:00.000Z</published>
    <updated>2016-12-11T13:45:47.274Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;Old&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Field of study that gives computers the ability to learn without being explicitly programmed&lt;br&gt; —— Arthur Samuel (1959)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mordern &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E&lt;br&gt;—— Tom Mitchell (1998)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;算法分类&quot;&gt;&lt;a href=&quot;#算法分类&quot; class=&quot;headerlink&quot; title=&quot;算法分类&quot;&gt;&lt;/a&gt;算法分类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;监督学习(Supervised Learning)&lt;br&gt; 特点：”Right answers given”&lt;br&gt; 即有训练集(training set)，包含输入和期望的输出&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;回归 (Regression)&lt;/strong&gt;&lt;br&gt; Predict &lt;strong&gt;continous&lt;/strong&gt; valued output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分类 (Classification)&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;Discreted&lt;/strong&gt; valued output（判断是或不是）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非监督学习(Unsupervised Learning)&lt;br&gt; 即没有训练集，譬如典型的根据相似度进行分类，但并不知道某一类是什么&lt;/li&gt;
&lt;li&gt;其他还有增强学习(Reinforcement Learning), 推荐系统(Recommender Systems)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;Old&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Field of study that gives computers the ability to learn without being explicitly programmed&lt;br&gt; —— Arthur Samuel (1959)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mordern &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E&lt;br&gt;—— Tom Mitchell (1998)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://ziqi.moe/blog/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>内存泄漏</title>
    <link href="http://ziqi.moe/blog/Memory-Leak/"/>
    <id>http://ziqi.moe/blog/Memory-Leak/</id>
    <published>2015-02-04T13:25:09.000Z</published>
    <updated>2016-03-28T01:46:12.833Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;不能记住过去的人, 被迫重复过去.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个标题似乎表示我正准备写一篇技术文章，可惜才疏学浅（操作系统都没学在这儿BB什么！），这只是一篇偷换概念的普通随笔而已。为什么说内存泄漏呢？因为我这个人已经实实在在处于内存泄漏状态了。&lt;/p&gt;
&lt;p&gt;自从大一暑假以来，以下代码描述了我的真实状态&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; learning_area T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (found_new_interest)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T* p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; learning_area();&lt;span class=&quot;comment&quot;&gt;//同学你的指针用一次就找不到了！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;learn_three_days();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;rest_two_days();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//同学你的delete去哪儿了？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//同学你醒醒你醒醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后只能睡一觉重启了&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;细数一下有多少野指针：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web开发（包括HTML、CSS、JavaScript、PHP、Bootstrap…balabala）&lt;/li&gt;
&lt;li&gt;Python（现在也扯上Web了）&lt;/li&gt;
&lt;li&gt;Git（版本控制什么高大上的都没用过，纯粹在当代码仓库）&lt;/li&gt;
&lt;li&gt;Tex（为了以后写论文会用到吗？）&lt;/li&gt;
&lt;li&gt;网络安全（XSS、sql注入、nmap、burp、密码字典暴力破解，好像都没成功过）&lt;/li&gt;
&lt;li&gt;数据结构和算法分析（说好的大二上认真学算法的呢？）&lt;/li&gt;
&lt;li&gt;机器人&lt;/li&gt;
&lt;li&gt;图形图像(OpenCV大法？）&lt;/li&gt;
&lt;li&gt;机器学习（寒假没事干看一看Andrew Ng的课）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再算上大一下的安卓，好的，内存已经溢出了。&lt;/p&gt;
&lt;p&gt;好的，内存整理第一阶段终于算是完成了。&lt;/p&gt;
&lt;p&gt;总结一下问题所在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有输出，内存不够用还有硬盘啊&lt;/li&gt;
&lt;li&gt;每次都是三天打渔两天晒网的，没有一个能打的，别人问个问题秒秒钟倒下&lt;/li&gt;
&lt;li&gt;输入范围太大，资源密集症，这真的是最好的时代，MOOC、文档、博客一堆堆，但对于选择来说也是极其困难的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，野指针又乱飞了。得重启下了，明天继续内存整理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不能记住过去的人, 被迫重复过去.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个标题似乎表示我正准备写一篇技术文章，可惜才疏学浅（操作系统都没学在这儿BB什么！），这只是一篇偷换概念的普通随笔而已。为什么说内存泄漏呢？因为我这个人已经实实在在处于内存泄漏状态了。&lt;/p&gt;
&lt;p&gt;自从大一暑假以来，以下代码描述了我的真实状态&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; learning_area T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (found_new_interest)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T* p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; learning_area();&lt;span class=&quot;comment&quot;&gt;//同学你的指针用一次就找不到了！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;learn_three_days();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;rest_two_days();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//同学你的delete去哪儿了？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//同学你醒醒你醒醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后只能睡一觉重启了&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ziqi.moe/blog/tags/eassy/"/>
    
  </entry>
  
  <entry>
    <title>数据结构讲义中的格言</title>
    <link href="http://ziqi.moe/blog/Motto-In-Data-Structure/"/>
    <id>http://ziqi.moe/blog/Motto-In-Data-Structure/</id>
    <published>2014-11-22T11:34:00.000Z</published>
    <updated>2016-03-28T01:43:41.281Z</updated>
    
    <content type="html">&lt;p&gt;来自清华大学邓俊辉教授的数据结构讲义&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computer science should be called computing science, for the same&lt;br&gt;reason why surgery is not called knife science.&lt;br&gt;—— E. Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算模型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To measure is to know.&lt;br&gt;If you can not measure it,you can not improve it.&lt;br&gt;—— Lord Kelvin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大O记号&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mathematics is more in need of good notations than of new theorems.&lt;br&gt;—— Alan Turing&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;好读书不求甚解&lt;br&gt;每有会意，便欣然忘食&lt;br&gt;—— 陶渊明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;算法分析&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He calculated just as men breath, as eagle sustain themselves in the air.&lt;br&gt;—— Francois Arago&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;迭代与递归&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;迭代乃人工，递归方神通&lt;br&gt;To iterate is human, to recurse, divine.&lt;/p&gt;
&lt;p&gt;凡治众如治寡，分数是也&lt;br&gt;The control of a large force is the same principle as the control of a few men: it is merely a question of dividing up their numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;局限&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不学诗，何以言&lt;br&gt;不学礼，何以立&lt;br&gt;—— 《论语》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;排序与下界&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两个吃罢饭，又走了四五十里，却来到一市镇上，地名唤做瑞龙镇，却是个三岔路口。宋江借问那里人道：“小人们欲投二龙山、清风镇上，不知从那条路去？”&lt;br&gt;—— 《水浒传》&lt;/p&gt;
&lt;p&gt;不怕不识货，就怕货比货&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;向量&quot;&gt;&lt;a href=&quot;#向量&quot; class=&quot;headerlink&quot; title=&quot;向量&quot;&gt;&lt;/a&gt;向量&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;有序向量：唯一化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everybody is different.&lt;br&gt;Everybody has different styles.&lt;br&gt;Just do the best way you know how.&lt;br&gt;—— Vince Carter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有序向量：二分查找&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;群猴道：“自从爷爷去后，这山被二郎菩萨点上火，烧杀了大半。我们蹲在井里，钻在涧内，藏于铁板桥下，得了性命。及至火灭烟消，出来时，又没花果养赡，难以存活，别处又去了一半。我们这一半，捱苦的住在山中，这两年，又被些打猎的抢了一半去也。”&lt;br&gt;—— 《西游记》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;归并排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think there is a world market for about five computers.&lt;br&gt;—— T.J.Watson, 1943&lt;/p&gt;
&lt;p&gt;天下大势，分久必合，合久必分&lt;br&gt;—— 《三国演义》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;接口与实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t lose the link.&lt;br&gt;—— Robin Milner&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当下又选了几样果菜与凤姐送去，凤姐儿也送了几样来&lt;br&gt;—— 《红楼梦》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一语未了,只见宝玉笑嘻嘻了一枝红梅进来,众丫鬟忙已接过,插入瓶内&lt;br&gt;—— 《红楼梦》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;归并排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;四牡孔阜,六辔在手&lt;br&gt;骐骝是中,騧骊是骖&lt;br&gt;龙盾之合,鋈以觼軜&lt;br&gt;—— 《国风·秦风·小戎》&lt;/p&gt;
&lt;p&gt;曰两美其必合兮,孰信修而慕之？&lt;br&gt;思九州之博大兮,岂惟是其有女？&lt;br&gt;—— 《离骚》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;栈与队列&quot;&gt;&lt;a href=&quot;#栈与队列&quot; class=&quot;headerlink&quot; title=&quot;栈与队列&quot;&gt;&lt;/a&gt;栈与队列&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;栈接口与实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;陛下用群臣，如积薪耳，后来者居上&lt;br&gt;—— 《史记·汲郑列传》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈应用：进制转换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hickory,Dickory,Dock&lt;br&gt;The mouse ran up the clock&lt;br&gt;—— Nursery Rhyme Medly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈应用：中缀表达式求值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知实而不知名，知名而不知实，皆不知也&lt;br&gt;—— 王夫之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逆波兰表达式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将欲去之，必固举之&lt;br&gt;将欲夺之，必固予之&lt;br&gt;将欲灭之，必先学之&lt;br&gt;—— 《老子》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;试探回溯法：迷宫寻径&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When all else fails, try brute-force.&lt;br&gt;—— Anonymous&lt;/p&gt;
&lt;p&gt;No matter where they take us, we’ll find our way back.&lt;br&gt;—— “No matter what”, Boyzone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;树&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two roads diverged in a yellow wood&lt;br&gt;And sorry I could not travel both&lt;br&gt;—— Robin Frost, 1915&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先序遍历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真君曰：“昔吕洞宾居庐山而成仙，鬼谷子居云梦而得道，今或无此吉地么？”&lt;br&gt;璞曰：“有！但当遍历耳。”&lt;br&gt;—— 《警世通言》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后序遍历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大宗百世不迁，小宗五世则迁&lt;br&gt;—— 《礼记·大传》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;概述&lt;blockquote&gt;
&lt;p&gt;here’s nothing hidden in your head&lt;br&gt;The Sorting Hat can’t see,&lt;br&gt;So try me on and I will tell you&lt;br&gt;Where you ought to be.&lt;br&gt;—— Harry Potter and The Sorcecer’s Stone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;待续&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;来自清华大学邓俊辉教授的数据结构讲义&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computer science should be called computing science, for the same&lt;br&gt;reason why surgery is not called knife science.&lt;br&gt;—— E. Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算模型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To measure is to know.&lt;br&gt;If you can not measure it,you can not improve it.&lt;br&gt;—— Lord Kelvin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大O记号&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mathematics is more in need of good notations than of new theorems.&lt;br&gt;—— Alan Turing&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://ziqi.moe/blog/tags/algo/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started On Android</title>
    <link href="http://ziqi.moe/blog/Getting-Started-On-Android/"/>
    <id>http://ziqi.moe/blog/Getting-Started-On-Android/</id>
    <published>2014-03-05T13:23:40.000Z</published>
    <updated>2016-03-27T13:24:15.821Z</updated>
    
    <content type="html">&lt;p&gt;This term I ,or should be we,decided to develop an android app.So recently I have been searching for some resources online.For example,the class I mentioned ever on Cousera. However, sometimes I would be fed up with the speed of the teacher and I can’t still watch the videos. Maybe I need a book.Luckily I found a set of documents on the android official website.Then I realize that once you have any problem,your first choice to solve it should be the android official reference.The introduction of all APIs and classes you may use is just there,waiting for you.But sometimes I also feel it would be a little hard to fetch what you need because of the large quantity of information. How lucky!Google has written a tutorial for the beginner like me.You can just follow its steps,introduction,and tips. Well,let me make a summary of my beginning. First,I learn how to create an android application project.And in this process some points as followings:&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;The package name of app should be unique and it can’t be changed later.&lt;br&gt;The minimum required SDK determines your app’s compatibility but can be changed later.&lt;br&gt;And you can edit your app’s icon and the kind of the main activity.&lt;br&gt;Second,building a simple UI.&lt;/p&gt;
&lt;p&gt;Finally,starting another activity,making communication along activities and transferring simple data like text.&lt;/p&gt;
&lt;p&gt;Well,so I’m getting started and I will work harder!Come on!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This term I ,or should be we,decided to develop an android app.So recently I have been searching for some resources online.For example,the class I mentioned ever on Cousera. However, sometimes I would be fed up with the speed of the teacher and I can’t still watch the videos. Maybe I need a book.Luckily I found a set of documents on the android official website.Then I realize that once you have any problem,your first choice to solve it should be the android official reference.The introduction of all APIs and classes you may use is just there,waiting for you.But sometimes I also feel it would be a little hard to fetch what you need because of the large quantity of information. How lucky!Google has written a tutorial for the beginner like me.You can just follow its steps,introduction,and tips. Well,let me make a summary of my beginning. First,I learn how to create an android application project.And in this process some points as followings:&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Websites Recommendation</title>
    <link href="http://ziqi.moe/blog/Websites-Recommendation/"/>
    <id>http://ziqi.moe/blog/Websites-Recommendation/</id>
    <published>2014-03-02T13:18:00.000Z</published>
    <updated>2016-03-28T01:46:17.845Z</updated>
    
    <content type="html">&lt;p&gt;Last night, I read a passage on Zhihu Daily.It recommended lots of wonderful websites to learn online.I also noted some websites that was fresh for me.So here I decide to try to sort out some excellent websites I have already known.Definitely that means I will update this list when I find more.And I’m sorry that this list may almost match my own hobbies,such as coding.&lt;/p&gt;
&lt;p&gt;MOOCs(Massive Open Online Course):&lt;/p&gt;
&lt;p&gt;Coursera(Maybe the most popular MOOC website)&lt;/p&gt;
&lt;p&gt;edX(Almost from Harvard and MIT)&lt;/p&gt;
&lt;p&gt;Udacity(The course archive is always there)&lt;/p&gt;
&lt;p&gt;XuetangX(Chinese courses offered by Tsinghua University)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Some others:&lt;/p&gt;
&lt;p&gt;Khan Academy&lt;/p&gt;
&lt;p&gt;Free Online Classes(A collection of online courses)&lt;/p&gt;
&lt;p&gt;Netease Open Course&lt;/p&gt;
&lt;p&gt;Netease Cloud Course(To learn skills)&lt;/p&gt;
&lt;p&gt;Howzhi(A community to share knowledge)&lt;/p&gt;
&lt;p&gt;Ideas and thoughts:&lt;/p&gt;
&lt;p&gt;TED(Ideas worth spreading)&lt;/p&gt;
&lt;p&gt;Solve for X(A think tank project launched by Google to incite collaboration to solve global issues)&lt;/p&gt;
&lt;p&gt;Coding:&lt;/p&gt;
&lt;p&gt;Codecademy(Strongly recommended,A interactive learning website for Web (HTML, CSS, JavaScript, and PHP), Ruby, Python, and Miscellaneous)&lt;/p&gt;
&lt;p&gt;Stackoverflow(A Q&amp;amp;A website)&lt;/p&gt;
&lt;p&gt;Lynda(To learn computer skills)&lt;/p&gt;
&lt;p&gt;Opensourceforce(There’re lots of IT pioneers)&lt;/p&gt;
&lt;p&gt;Resource Library:&lt;/p&gt;
&lt;p&gt;For me,this is my online library to get resource I need.&lt;/p&gt;
&lt;p&gt;First,some Q&amp;amp;A websites.&lt;/p&gt;
&lt;p&gt;Zhihu(If I answer a question and can get the most approval,I can even forget the tasty of meat)&lt;/p&gt;
&lt;p&gt;In fact,it can be difficult to find those wonderful answers. So first you need to notice some core users.They are clever,knowledgeable and most important helpful.They can help you broaden your horizon.And also you can install Zhihu’s app on your smartphone. Zhihu Daily can be wonderful,there’re some excellent answers selected to publish every day.And what’s more,there’s Zhihu Roundtable.&lt;/p&gt;
&lt;p&gt;There’s a list of users that is worth noticing.Click here.&lt;/p&gt;
&lt;p&gt;Quora(Maybe better than Zhihu)&lt;/p&gt;
&lt;p&gt;Also there’s a list of recommended users on Quora.Click here.&lt;/p&gt;
&lt;p&gt;And as I just mentioned,Stackoverflow.&lt;/p&gt;
&lt;p&gt;Second,some communities.&lt;/p&gt;
&lt;p&gt;Douban(Books,movies,music,groups etc.)&lt;/p&gt;
&lt;p&gt;I like Douban because I can always get some surprise every day and learn to change my life little by little.&lt;/p&gt;
&lt;p&gt;CSDN(An IT community)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Last night, I read a passage on Zhihu Daily.It recommended lots of wonderful websites to learn online.I also noted some websites that was fresh for me.So here I decide to try to sort out some excellent websites I have already known.Definitely that means I will update this list when I find more.And I’m sorry that this list may almost match my own hobbies,such as coding.&lt;/p&gt;
&lt;p&gt;MOOCs(Massive Open Online Course):&lt;/p&gt;
&lt;p&gt;Coursera(Maybe the most popular MOOC website)&lt;/p&gt;
&lt;p&gt;edX(Almost from Harvard and MIT)&lt;/p&gt;
&lt;p&gt;Udacity(The course archive is always there)&lt;/p&gt;
&lt;p&gt;XuetangX(Chinese courses offered by Tsinghua University)&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ziqi.moe/blog/tags/eassy/"/>
    
  </entry>
  
  <entry>
    <title>世界，你好！</title>
    <link href="http://ziqi.moe/blog/Hello-World/"/>
    <id>http://ziqi.moe/blog/Hello-World/</id>
    <published>2014-02-28T13:13:41.000Z</published>
    <updated>2016-03-28T01:46:36.611Z</updated>
    
    <content type="html">&lt;p&gt;大多数语言的第一课大概都会是“Hello World!”吧，所以，我也从此开始记录生活，记录我的独白。或许这是为了能在纷繁复杂、兵荒马乱的岁月里，停下来，给自己一面镜子，映出那些终将遗失的美好，那些轻易忘记的丑陋。&lt;/p&gt;
&lt;p&gt;世界，你好！&lt;/p&gt;
&lt;p&gt;晚安，世界！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大多数语言的第一课大概都会是“Hello World!”吧，所以，我也从此开始记录生活，记录我的独白。或许这是为了能在纷繁复杂、兵荒马乱的岁月里，停下来，给自己一面镜子，映出那些终将遗失的美好，那些轻易忘记的丑陋。&lt;/p&gt;
&lt;p&gt;世界，你好！&lt;/p&gt;
&lt;p&gt;晚安，世界！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ziqi.moe/blog/tags/eassy/"/>
    
  </entry>
  
</feed>
